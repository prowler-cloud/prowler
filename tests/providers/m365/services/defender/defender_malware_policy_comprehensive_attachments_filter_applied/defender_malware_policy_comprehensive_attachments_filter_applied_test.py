from unittest import mock

from prowler.providers.m365.services.defender.defender_service import (
    MalwarePolicy,
    MalwareRule,
)
from tests.providers.m365.m365_fixtures import DOMAIN, set_mocked_m365_provider


class Test_defender_malware_policy_comprehensive_attachments_filter_applied:
    def test_no_policy(self):
        defender_client = mock.MagicMock()
        defender_client.audited_tenant = "audited_tenant"
        defender_client.audited_domain = DOMAIN
        defender_client.malware_policies = []
        defender_client.audit_config = {}
        defender_client.malware_rules = {}

        with (
            mock.patch(
                "prowler.providers.common.provider.Provider.get_global_provider",
                return_value=set_mocked_m365_provider(),
            ),
            mock.patch(
                "prowler.providers.m365.lib.powershell.m365_powershell.M365PowerShell.connect_exchange_online"
            ),
            mock.patch(
                "prowler.providers.m365.services.defender.defender_malware_policy_comprehensive_attachments_filter_applied.defender_malware_policy_comprehensive_attachments_filter_applied.defender_client",
                new=defender_client,
            ),
        ):
            from prowler.providers.m365.services.defender.defender_malware_policy_comprehensive_attachments_filter_applied.defender_malware_policy_comprehensive_attachments_filter_applied import (
                defender_malware_policy_comprehensive_attachments_filter_applied,
            )

            check = defender_malware_policy_comprehensive_attachments_filter_applied()
            result = check.execute()

            assert len(result) == 1
            assert result[0].status == "FAIL"
            assert (
                result[0].status_extended
                == "Common Attachment Types Filter is not enabled."
            )
            assert result[0].resource == {}
            assert result[0].resource_name == "Defender Malware Policy"
            assert result[0].resource_id == "defenderMalwarePolicy"
            assert result[0].location == "global"

    def test_policy_enabled_all_extensions_blocked(self):
        defender_client = mock.MagicMock()
        defender_client.audited_tenant = "audited_tenant"
        defender_client.audited_domain = DOMAIN

        with (
            mock.patch(
                "prowler.providers.common.provider.Provider.get_global_provider",
                return_value=set_mocked_m365_provider(),
            ),
            mock.patch(
                "prowler.providers.m365.lib.powershell.m365_powershell.M365PowerShell.connect_exchange_online"
            ),
            mock.patch(
                "prowler.providers.m365.services.defender.defender_malware_policy_comprehensive_attachments_filter_applied.defender_malware_policy_comprehensive_attachments_filter_applied.defender_client",
                new=defender_client,
            ),
        ):
            from prowler.providers.m365.services.defender.defender_malware_policy_comprehensive_attachments_filter_applied.defender_malware_policy_comprehensive_attachments_filter_applied import (
                defender_malware_policy_comprehensive_attachments_filter_applied,
            )

            valid_extensions = ["exe", "bat", "js"]
            defender_client.audit_config = {
                "recommended_blocked_file_types": valid_extensions
            }
            defender_client.malware_rules = {"PolicyGood": MalwareRule(state="Enabled")}
            defender_client.malware_policies = [
                MalwarePolicy(
                    enable_file_filter=True,
                    identity="PolicyGood",
                    enable_internal_sender_admin_notifications=True,
                    internal_sender_admin_address="admin@example.com",
                    file_types=valid_extensions,
                    is_default=True,
                )
            ]

            check = defender_malware_policy_comprehensive_attachments_filter_applied()
            result = check.execute()

            assert len(result) == 1
            assert result[0].status == "PASS"
            assert (
                result[0].status_extended
                == "Common Attachment Types Filter is enabled in anti-malware policy PolicyGood, the policy is enabled and the filter is applied to the recommended file types."
            )
            assert result[0].resource == defender_client.malware_policies[0].dict()
            assert result[0].resource_name == "Defender Malware Policy"
            assert result[0].resource_id == "defenderMalwarePolicy"
            assert result[0].location == "global"

    def test_policy_enabled_missing_extensions(self):
        defender_client = mock.MagicMock()
        defender_client.audited_tenant = "audited_tenant"
        defender_client.audited_domain = DOMAIN

        with (
            mock.patch(
                "prowler.providers.common.provider.Provider.get_global_provider",
                return_value=set_mocked_m365_provider(),
            ),
            mock.patch(
                "prowler.providers.m365.lib.powershell.m365_powershell.M365PowerShell.connect_exchange_online"
            ),
            mock.patch(
                "prowler.providers.m365.services.defender.defender_malware_policy_comprehensive_attachments_filter_applied.defender_malware_policy_comprehensive_attachments_filter_applied.defender_client",
                new=defender_client,
            ),
        ):
            from prowler.providers.m365.services.defender.defender_malware_policy_comprehensive_attachments_filter_applied.defender_malware_policy_comprehensive_attachments_filter_applied import (
                defender_malware_policy_comprehensive_attachments_filter_applied,
            )

            defender_client.audit_config = {
                "recommended_blocked_file_types": ["exe", "bat", "js"]
            }
            defender_client.malware_rules = {
                "PolicyPartial": MalwareRule(state="Enabled")
            }
            defender_client.malware_policies = [
                MalwarePolicy(
                    enable_file_filter=True,
                    identity="PolicyPartial",
                    enable_internal_sender_admin_notifications=True,
                    internal_sender_admin_address="admin@example.com",
                    file_types=["exe"],
                    is_default=True,
                )
            ]

            check = defender_malware_policy_comprehensive_attachments_filter_applied()
            result = check.execute()

            assert len(result) == 1
            assert result[0].status == "FAIL"
            assert (
                result[0].status_extended
                == "Common Attachment Types Filter is enabled in anti-malware policy PolicyPartial, but the following recommended file types are missing: bat, js."
            )
            assert result[0].resource == defender_client.malware_policies[0].dict()
            assert result[0].resource_name == "Defender Malware Policy"
            assert result[0].resource_id == "defenderMalwarePolicy"
            assert result[0].location == "global"

    def test_policy_enabled_but_rule_disabled(self):
        defender_client = mock.MagicMock()
        defender_client.audited_tenant = "audited_tenant"
        defender_client.audited_domain = DOMAIN

        with (
            mock.patch(
                "prowler.providers.common.provider.Provider.get_global_provider",
                return_value=set_mocked_m365_provider(),
            ),
            mock.patch(
                "prowler.providers.m365.lib.powershell.m365_powershell.M365PowerShell.connect_exchange_online"
            ),
            mock.patch(
                "prowler.providers.m365.services.defender.defender_malware_policy_comprehensive_attachments_filter_applied.defender_malware_policy_comprehensive_attachments_filter_applied.defender_client",
                new=defender_client,
            ),
        ):
            from prowler.providers.m365.services.defender.defender_malware_policy_comprehensive_attachments_filter_applied.defender_malware_policy_comprehensive_attachments_filter_applied import (
                defender_malware_policy_comprehensive_attachments_filter_applied,
            )

            valid_extensions = ["exe"]
            defender_client.audit_config = {
                "recommended_blocked_file_types": valid_extensions
            }
            defender_client.malware_rules = {
                "PolicyDisabled": MalwareRule(state="Disabled")
            }
            defender_client.malware_policies = [
                MalwarePolicy(
                    enable_file_filter=True,
                    identity="PolicyDisabled",
                    enable_internal_sender_admin_notifications=True,
                    internal_sender_admin_address="admin@example.com",
                    file_types=valid_extensions,
                    is_default=False,
                )
            ]

            check = defender_malware_policy_comprehensive_attachments_filter_applied()
            result = check.execute()

            assert len(result) == 1
            assert result[0].status == "FAIL"
            assert (
                result[0].status_extended
                == "Common Attachment Types Filter is enabled in anti-malware policy PolicyDisabled, but the policy is disabled."
            )
            assert result[0].resource == defender_client.malware_policies[0].dict()
            assert result[0].resource_name == "Defender Malware Policy"
            assert result[0].resource_id == "defenderMalwarePolicy"
            assert result[0].location == "global"

    def test_policy_enabled_but_no_rule_and_not_default(self):
        defender_client = mock.MagicMock()
        defender_client.audited_tenant = "audited_tenant"
        defender_client.audited_domain = DOMAIN

        with (
            mock.patch(
                "prowler.providers.common.provider.Provider.get_global_provider",
                return_value=set_mocked_m365_provider(),
            ),
            mock.patch(
                "prowler.providers.m365.lib.powershell.m365_powershell.M365PowerShell.connect_exchange_online"
            ),
            mock.patch(
                "prowler.providers.m365.services.defender.defender_malware_policy_comprehensive_attachments_filter_applied.defender_malware_policy_comprehensive_attachments_filter_applied.defender_client",
                new=defender_client,
            ),
        ):
            from prowler.providers.m365.services.defender.defender_malware_policy_comprehensive_attachments_filter_applied.defender_malware_policy_comprehensive_attachments_filter_applied import (
                defender_malware_policy_comprehensive_attachments_filter_applied,
            )

            valid_extensions = ["exe"]
            defender_client.audit_config = {
                "recommended_blocked_file_types": valid_extensions
            }
            defender_client.malware_rules = {}
            defender_client.malware_policies = [
                MalwarePolicy(
                    enable_file_filter=True,
                    identity="PolicyNoRule",
                    enable_internal_sender_admin_notifications=True,
                    internal_sender_admin_address="admin@example.com",
                    file_types=valid_extensions,
                    is_default=False,
                )
            ]

            check = defender_malware_policy_comprehensive_attachments_filter_applied()
            result = check.execute()

            assert len(result) == 1
            assert result[0].status == "FAIL"
            assert (
                result[0].status_extended
                == "Common Attachment Types Filter is not properly configured in anti-malware policy PolicyNoRule."
            )
            assert result[0].resource == defender_client.malware_policies[0].dict()
            assert result[0].resource_name == "Defender Malware Policy"
            assert result[0].resource_id == "defenderMalwarePolicy"
            assert result[0].location == "global"
