from unittest import mock

from tests.providers.m365.m365_fixtures import DOMAIN, set_mocked_m365_provider


class Test_defender_malware_policy_common_attachments_filter_enabled:
    def test_enable_file_filter_disabled(self):
        defender_client = mock.MagicMock()
        defender_client.audited_tenant = "audited_tenant"
        defender_client.audited_domain = DOMAIN

        with (
            mock.patch(
                "prowler.providers.common.provider.Provider.get_global_provider",
                return_value=set_mocked_m365_provider(),
            ),
            mock.patch(
                "prowler.providers.m365.lib.powershell.m365_powershell.M365PowerShell.connect_exchange_online"
            ),
            mock.patch(
                "prowler.providers.m365.services.defender.defender_malware_policy_common_attachments_filter_enabled.defender_malware_policy_common_attachments_filter_enabled.defender_client",
                new=defender_client,
            ),
        ):
            from prowler.providers.m365.services.defender.defender_malware_policy_common_attachments_filter_enabled.defender_malware_policy_common_attachments_filter_enabled import (
                defender_malware_policy_common_attachments_filter_enabled,
            )
            from prowler.providers.m365.services.defender.defender_service import (
                MalwarePolicy,
            )

            defender_client.malware_policies = [
                MalwarePolicy(
                    enable_file_filter=False,
                    identity="Policy1",
                    enable_internal_sender_admin_notifications=False,
                    internal_sender_admin_address="",
                    file_types=[],
                    is_default=True,
                ),
            ]

            check = defender_malware_policy_common_attachments_filter_enabled()
            result = check.execute()
            assert len(result) == 1

            assert result[0].status == "FAIL"
            assert (
                result[0].status_extended
                == "Common Attachment Types Filter is not enabled in anti-malware policy Policy1."
            )
            assert result[0].resource == defender_client.malware_policies[0].dict()
            assert result[0].resource_name == "Defender Malware Policy"
            assert result[0].resource_id == "defenderMalwarePolicy"
            assert result[0].location == "global"

    def test_enable_file_filter_enabled(self):
        defender_client = mock.MagicMock()
        defender_client.audited_tenant = "audited_tenant"
        defender_client.audited_domain = DOMAIN

        with (
            mock.patch(
                "prowler.providers.common.provider.Provider.get_global_provider",
                return_value=set_mocked_m365_provider(),
            ),
            mock.patch(
                "prowler.providers.m365.lib.powershell.m365_powershell.M365PowerShell.connect_exchange_online"
            ),
            mock.patch(
                "prowler.providers.m365.services.defender.defender_malware_policy_common_attachments_filter_enabled.defender_malware_policy_common_attachments_filter_enabled.defender_client",
                new=defender_client,
            ),
        ):
            from prowler.providers.m365.services.defender.defender_malware_policy_common_attachments_filter_enabled.defender_malware_policy_common_attachments_filter_enabled import (
                defender_malware_policy_common_attachments_filter_enabled,
            )
            from prowler.providers.m365.services.defender.defender_service import (
                MalwarePolicy,
            )

            defender_client.malware_policies = [
                MalwarePolicy(
                    enable_file_filter=True,
                    identity="Policy1",
                    enable_internal_sender_admin_notifications=False,
                    internal_sender_admin_address="",
                    file_types=[],
                    is_default=True,
                ),
            ]

            check = defender_malware_policy_common_attachments_filter_enabled()
            result = check.execute()
            assert len(result) == 1

            assert result[0].status == "PASS"
            assert (
                result[0].status_extended
                == "Common Attachment Types Filter is enabled in anti-malware policy Policy1."
            )
            assert result[0].resource == defender_client.malware_policies[0].dict()
            assert result[0].resource_name == "Defender Malware Policy"
            assert result[0].resource_id == "defenderMalwarePolicy"
            assert result[0].location == "global"

    def test_no_policy(self):
        defender_client = mock.MagicMock()
        defender_client.audited_tenant = "audited_tenant"
        defender_client.audited_domain = DOMAIN

        with (
            mock.patch(
                "prowler.providers.common.provider.Provider.get_global_provider",
                return_value=set_mocked_m365_provider(),
            ),
            mock.patch(
                "prowler.providers.m365.lib.powershell.m365_powershell.M365PowerShell.connect_exchange_online"
            ),
            mock.patch(
                "prowler.providers.m365.services.defender.defender_malware_policy_common_attachments_filter_enabled.defender_malware_policy_common_attachments_filter_enabled.defender_client",
                new=defender_client,
            ),
        ):
            from prowler.providers.m365.services.defender.defender_malware_policy_common_attachments_filter_enabled.defender_malware_policy_common_attachments_filter_enabled import (
                defender_malware_policy_common_attachments_filter_enabled,
            )

            defender_client.malware_policies = []

            check = defender_malware_policy_common_attachments_filter_enabled()
            result = check.execute()
            assert len(result) == 1
            assert result[0].status == "FAIL"
            assert (
                result[0].status_extended
                == "Common Attachment Types Filter is not enabled."
            )
            assert result[0].resource == {}
            assert result[0].resource_name == "Defender Malware Policy"
            assert result[0].resource_id == "defenderMalwarePolicy"
            assert result[0].location == "global"
