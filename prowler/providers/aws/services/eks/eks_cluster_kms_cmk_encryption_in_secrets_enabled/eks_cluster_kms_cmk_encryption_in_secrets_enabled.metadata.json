{
  "Provider": "aws",
  "CheckID": "eks_cluster_kms_cmk_encryption_in_secrets_enabled",
  "CheckTitle": "EKS cluster has Kubernetes secrets encryption enabled",
  "CheckType": [
    "Software and Configuration Checks/AWS Security Best Practices",
    "Software and Configuration Checks/Industry and Regulatory Standards/AWS Foundational Security Best Practices"
  ],
  "ServiceName": "eks",
  "SubServiceName": "",
  "ResourceIdTemplate": "",
  "Severity": "medium",
  "ResourceType": "AwsEksCluster",
  "Description": "**Amazon EKS** clusters configure **AWS KMS envelope encryption** so Kubernetes **Secrets** are stored in etcd as ciphertext at rest.",
  "Risk": "Without KMS-backed encryption, etcd data and snapshots can reveal plaintext secrets. Attackers with API, node, or storage access can steal tokens, passwords, and keys, enabling impersonation, pod takeover, and lateral movement-compromising confidentiality and leading to privilege escalation.",
  "RelatedUrl": "",
  "AdditionalURLs": [
    "https://docs.aws.amazon.com/prescriptive-guidance/latest/encryption-best-practices/eks.html",
    "https://www.trendmicro.com/cloudoneconformity/knowledge-base/aws/EKS/enable-envelope-encryption.html",
    "https://devoriales.com/post/329/aws-eks-secret-encryption-securing-your-eks-secrets-at-rest-with-aws-kms",
    "https://docs.aws.amazon.com/eks/latest/userguide/enable-kms.html"
  ],
  "Remediation": {
    "Code": {
      "CLI": "aws eks associate-encryption-config --cluster-name <example_resource_name> --encryption-config '[{\"resources\":[\"secrets\"],\"provider\":{\"keyArn\":\"arn:aws:kms:<REGION>:<ACCOUNT_ID>:key/<example_resource_id>\"}}]'",
      "NativeIaC": "```yaml\n# CloudFormation: enable KMS envelope encryption for Kubernetes secrets\nResources:\n  EKSCluster:\n    Type: AWS::EKS::Cluster\n    Properties:\n      Name: \"<example_resource_name>\"\n      RoleArn: \"arn:aws:iam::<ACCOUNT_ID>:role/<example_resource_name>\"\n      ResourcesVpcConfig:\n        SubnetIds:\n          - \"<example_resource_id>\"\n          - \"<example_resource_id>\"\n      EncryptionConfig:                # Critical: enables KMS encryption for Kubernetes secrets\n        - Resources:\n            - secrets                  # Critical: encrypts only Kubernetes secrets\n          Provider:\n            KeyArn: \"arn:aws:kms:<REGION>:<ACCOUNT_ID>:key/<example_resource_id>\"  # Critical: KMS key used for encryption\n```",
      "Other": "1. Open the AWS Management Console and go to Amazon EKS\n2. Select your cluster\n3. On the Overview tab, find Secrets encryption and click Enable\n4. Select the KMS key and click Enable\n5. Click Confirm to apply",
      "Terraform": "```hcl\n# Enable KMS envelope encryption for Kubernetes secrets\nresource \"aws_eks_cluster\" \"main\" {\n  name     = \"<example_resource_name>\"\n  role_arn = \"arn:aws:iam::<ACCOUNT_ID>:role/<example_resource_name>\"\n\n  vpc_config {\n    subnet_ids = [\"<example_resource_id>\", \"<example_resource_id>\"]\n  }\n\n  encryption_config {                 # Critical: enables KMS encryption for secrets\n    resources = [\"secrets\"]          # Critical: scope to Kubernetes secrets\n    provider {\n      key_arn = \"arn:aws:kms:<REGION>:<ACCOUNT_ID>:key/<example_resource_id>\"  # Critical: KMS key\n    }\n  }\n}\n```"
    },
    "Recommendation": {
      "Text": "Enable cluster-level secrets encryption with **AWS KMS** and prefer a **customer managed KMS key** for control and rotation. Apply **least privilege** to key policies and cluster roles, monitor key usage, and combine with strict **RBAC** to limit who can read or create secrets as part of **defense in depth**.",
      "Url": "https://hub.prowler.com/check/eks_cluster_kms_cmk_encryption_in_secrets_enabled"
    }
  },
  "Categories": [
    "encryption",
    "cluster-security"
  ],
  "DependsOn": [],
  "RelatedTo": [],
  "Notes": ""
}
