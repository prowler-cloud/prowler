{
  "Provider": "aws",
  "CheckID": "bedrock_api_key_no_administrative_privileges",
  "CheckTitle": "Amazon Bedrock API key does not have administrative privileges, privilege escalation paths, or full Bedrock service access",
  "CheckType": [
    "Software and Configuration Checks/AWS Security Best Practices",
    "Software and Configuration Checks/Industry and Regulatory Standards/AWS Foundational Security Best Practices",
    "Software and Configuration Checks/Industry and Regulatory Standards/CIS AWS Foundations Benchmark",
    "TTPs/Privilege Escalation"
  ],
  "ServiceName": "bedrock",
  "SubServiceName": "",
  "ResourceIdTemplate": "",
  "Severity": "high",
  "ResourceType": "AwsIamAccessKey",
  "Description": "**Amazon Bedrock API keys** linked to IAM users are evaluated for excessive permissions, including policies that grant full access (`*` or `bedrock:*`) or enable **privilege escalation**. The finding highlights keys whose attached or inline policies provide broad or escalating capabilities.",
  "Risk": "Over-privileged Bedrock API keys weaken confidentiality, integrity, and availability. If compromised, an attacker could:\n- Escalate IAM rights and persist access\n- Invoke models at scale to exfiltrate data or incur high costs\n- Modify Bedrock settings, disrupting operations",
  "RelatedUrl": "",
  "AdditionalURLs": [
    "https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege",
    "https://docs.aws.amazon.com/IAM/latest/UserGuide/getting-started-reduce-permissions.html",
    "https://docs.aws.amazon.com/bedrock/latest/userguide/api-keys.html",
    "https://cloudsec.cybr.com/aws/iam/least-privilege/",
    "https://www.datadoghq.com/blog/iam-least-privilege/",
    "https://docs.anythingllm.com/setup/llm-configuration/cloud/aws-bedrock",
    "https://medium.com/@piyushkashyap045/a-guide-to-creating-identity-based-policies-for-amazon-bedrock-to-prevent-unnecessary-costs-eaf12cce5442",
    "https://readmedium.com/aws-iam-permission-boundaries-83180a50c89e"
  ],
  "Remediation": {
    "Code": {
      "CLI": "aws iam delete-service-specific-credential --user-name <username> --service-specific-credential-id <credential-id>",
      "NativeIaC": "```yaml\n# CloudFormation: attach least-privilege policy to the IAM user owning the Bedrock API key\nResources:\n  <example_resource_name>:\n    Type: AWS::IAM::Policy\n    Properties:\n      PolicyName: least-priv-bedrock\n      Users:\n        - <example_resource_name>\n      PolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Action:\n              - bedrock:InvokeModel  # CRITICAL: allow only needed Bedrock action to avoid admin or bedrock:* permissions\n            Resource: \"*\"  # Limits access scope to only InvokeModel on any resource\n```",
      "Other": "1. Open the AWS Console and go to IAM > Users\n2. Select the user that owns the Bedrock service-specific credential (Security credentials > Service-specific credentials shows bedrock.amazonaws.com)\n3. In the Permissions tab, detach any policy granting AdministratorAccess or bedrock:* (e.g., AmazonBedrockFullAccess)\n4. In the same tab, delete any inline policy that provides admin/privilege-escalation permissions or bedrock:* access\n5. If Bedrock access is needed, add a minimal policy allowing only bedrock:InvokeModel\n6. Save changes",
      "Terraform": "```hcl\n# Attach a minimal inline policy to the IAM user owning the Bedrock API key\nresource \"aws_iam_user_policy\" \"<example_resource_name>\" {\n  name = \"least-priv-bedrock\"\n  user = \"<example_resource_name>\"\n\n  # CRITICAL: allow only the specific action required; avoids admin or bedrock:* full access\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [{\n      Effect   = \"Allow\"\n      Action   = [\"bedrock:InvokeModel\"]\n      Resource = \"*\"\n    }]\n  })\n}\n```"
    },
    "Recommendation": {
      "Text": "Enforce **least privilege** on Bedrock keys:\n- Avoid wildcards like `*` and `bedrock:*`; allow only required actions\n- Prevent identity changes by disallowing `iam:*`\n- Prefer short-term credentials with rotation and MFA\n- Use permissions boundaries and SCPs as guardrails\n- Review usage and tighten policies via access analysis",
      "Url": "https://hub.prowler.com/check/bedrock_api_key_no_administrative_privileges"
    }
  },
  "Categories": [
    "gen-ai",
    "identity-access"
  ],
  "DependsOn": [],
  "RelatedTo": [],
  "Notes": "This check verifies that Amazon Bedrock API keys do not have administrative privileges or privilege escalation capabilities through attached IAM policies or inline policies. It follows the principle of least privilege to ensure API keys only have the minimum necessary permissions and cannot be used to escalate privileges."
}
