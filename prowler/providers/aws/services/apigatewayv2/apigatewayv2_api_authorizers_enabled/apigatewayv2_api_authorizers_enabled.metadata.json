{
  "Provider": "aws",
  "CheckID": "apigatewayv2_api_authorizers_enabled",
  "CheckTitle": "API Gateway V2 API has an authorizer configured",
  "CheckAliases": [
    "apigatewayv2_authorizers_enabled"
  ],
  "CheckType": [
    "Software and Configuration Checks/AWS Security Best Practices",
    "TTPs/Initial Access",
    "Effects/Data Exposure"
  ],
  "ServiceName": "apigatewayv2",
  "SubServiceName": "",
  "ResourceIdTemplate": "",
  "Severity": "medium",
  "ResourceType": "AwsApiGatewayV2Api",
  "Description": "**API Gateway v2 APIs** use **authorizers** (JWT/Cognito or Lambda) to authenticate requests. This evaluates whether an API has an authorizer configured to control access to its routes.",
  "Risk": "Without an authorizer, anyone can invoke routes.\n- Confidentiality: exposure of data and metadata\n- Integrity: unauthorized state changes or actions\n- Availability/Cost: automated abuse of backends, traffic spikes, and unexpected spend",
  "RelatedUrl": "",
  "AdditionalURLs": [
    "https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html",
    "https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html",
    "https://support.icompaas.com/support/solutions/articles/62000127114-ensure-api-gateway-has-configured-authorizers"
  ],
  "Remediation": {
    "Code": {
      "CLI": "aws apigatewayv2 create-authorizer --api-id <API_ID> --authorizer-type REQUEST --name <example_resource_name> --authorizer-uri arn:aws:apigateway:<REGION>:lambda:path/2015-03-31/functions/<LAMBDA_FUNCTION_ARN>/invocations --identity-source '$request.header.Authorization'",
      "NativeIaC": "```yaml\n# CloudFormation: create a minimal Lambda authorizer for API Gateway v2\nResources:\n  <example_resource_name>:\n    Type: AWS::ApiGatewayV2::Authorizer\n    Properties:\n      ApiId: <example_resource_id>\n      AuthorizerType: REQUEST  # Critical: enables a Lambda REQUEST authorizer on the API\n      AuthorizerUri: arn:aws:apigateway:<REGION>:lambda:path/2015-03-31/functions/<LAMBDA_FUNCTION_ARN>/invocations  # Critical: Lambda authorizer function to invoke\n      IdentitySource:  # Critical: where to read the auth token from\n        - \"$request.header.Authorization\"\n      Name: <example_resource_name>\n```",
      "Other": "1. In the AWS Console, go to API Gateway > APIs and select your HTTP/WebSocket API\n2. In the left nav, click Authorizers > Create authorizer\n3. Choose Lambda as the authorizer type and select your Lambda function\n4. Set Identity source to: $request.header.Authorization\n5. Click Create to add the authorizer",
      "Terraform": "```hcl\n# Minimal AWS API Gateway v2 Lambda authorizer\nresource \"aws_apigatewayv2_authorizer\" \"<example_resource_name>\" {\n  api_id           = \"<example_resource_id>\"\n  name             = \"<example_resource_name>\"\n  authorizer_type  = \"REQUEST\"  # Critical: creates a Lambda REQUEST authorizer\n  authorizer_uri   = \"arn:aws:apigateway:<REGION>:lambda:path/2015-03-31/functions/<LAMBDA_FUNCTION_ARN>/invocations\"  # Critical: Lambda to invoke\n  identity_sources = [\"$request.header.Authorization\"]  # Critical: identity source for authorization\n}\n```"
    },
    "Recommendation": {
      "Text": "Enable an **authorizer** (JWT/Cognito or Lambda) so only authenticated principals can invoke routes.\n- Enforce **least privilege** with scopes/claims or policy decisions\n- Apply **defense in depth** with resource policies, throttling, and WAF\n- Avoid public routes unless explicitly required",
      "Url": "https://hub.prowler.com/check/apigatewayv2_api_authorizers_enabled"
    }
  },
  "Categories": [
    "identity-access"
  ],
  "DependsOn": [],
  "RelatedTo": [],
  "Notes": ""
}
