{
  "Provider": "aws",
  "CheckID": "awslambda_function_no_secrets_in_code",
  "CheckTitle": "Lambda function code contains no hardcoded secrets",
  "CheckType": [
    "Software and Configuration Checks/AWS Security Best Practices",
    "Sensitive Data Identifications/Passwords",
    "Effects/Data Exposure"
  ],
  "ServiceName": "awslambda",
  "SubServiceName": "",
  "ResourceIdTemplate": "",
  "Severity": "critical",
  "ResourceType": "AwsLambdaFunction",
  "Description": "**Lambda function code** is analyzed for **embedded secrets** across files in the deployment package, detecting patterns like API keys, passwords, tokens, and connection strings. Findings reference file names and line numbers where potential secrets appear.",
  "Risk": "**Hardcoded secrets** undermine confidentiality and integrity: if code, layers, or artifacts are exposed, attackers can reuse credentials to access databases, APIs, or cloud resources, enabling data exfiltration and unauthorized changes.\n\nRotation is harder, increasing dwell time and blast radius of compromises.",
  "RelatedUrl": "",
  "AdditionalURLs": [
    "https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html",
    "https://docs.aws.amazon.com/secretsmanager/latest/userguide/best-practices.html",
    "https://aws.amazon.com/blogs/security/how-to-securely-provide-database-credentials-to-lambda-functions-by-using-aws-secrets-manager/",
    "https://medium.com/@dhamodhar474/secrets-management-in-aws-best-practices-with-aws-secrets-manager-71f11b33a2bb",
    "https://www.cloudcurls.com/2025/08/how-to-manage-secrets-securely-with-aws-secrets-manager.html",
    "https://aws.amazon.com/blogs/compute/securely-retrieving-secrets-with-aws-lambda/",
    "https://www.doppler.com/guides/aws-guides/lambda-secrets-manager",
    "https://docs.aws.amazon.com/secretsmanager/latest/userguide/lambda-functions.html"
  ],
  "Remediation": {
    "Code": {
      "CLI": "",
      "NativeIaC": "```yaml\n# Create a secret and allow the Lambda role to read it instead of hardcoding in code\nResources:\n  <example_resource_name>:\n    Type: AWS::SecretsManager::Secret\n    Properties:\n      Name: <example_resource_name>\n      GenerateSecretString:\n        PasswordLength: 32  # Critical: creates a managed secret so code can fetch at runtime\n\n  <example_resource_name>AccessPolicy:\n    Type: AWS::IAM::Policy\n    Properties:\n      PolicyName: allow-get-secret\n      Roles:\n        - <example_resource_name>  # Lambda execution role name\n      PolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: Allow\n            Action: secretsmanager:GetSecretValue  # Critical: permits runtime retrieval of the secret\n            Resource: !Ref <example_resource_name>  # Critical: restrict access to only this secret\n```",
      "Other": "1. In AWS Secrets Manager, click Store a new secret and create a secret for the value you hardcoded. Note the secret name/ARN.\n2. In IAM > Roles, open your Lambda execution role and add an inline policy allowing secretsmanager:GetSecretValue on that secret only.\n3. Edit your Lambda function code to remove the hardcoded value and retrieve it at runtime using the AWS SDK (GetSecretValue) with the secret name/ARN.\n4. Deploy the updated function code.",
      "Terraform": "```hcl\n# Store secret in Secrets Manager instead of hardcoding in Lambda code\nresource \"aws_secretsmanager_secret\" \"<example_resource_name>\" {\n  name = \"<example_resource_name>\"  # Critical: secret to be fetched at runtime\n}\n\n# Allow the Lambda execution role to read the secret\nresource \"aws_iam_role_policy\" \"<example_resource_name>_allow_get_secret\" {\n  name = \"allow-get-secret\"\n  role = \"<example_resource_name>\"  # Lambda execution role name\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [{\n      Effect   = \"Allow\"\n      Action   = \"secretsmanager:GetSecretValue\"  # Critical: permits runtime retrieval\n      Resource = aws_secretsmanager_secret.<example_resource_name>.arn  # Critical: scope to this secret only\n    }]\n  })\n}\n```"
    },
    "Recommendation": {
      "Text": "Use **AWS Secrets Manager** (or Parameter Store) to store secrets and retrieve at runtime; never put them in code or Lambda env vars.\n- Apply **least privilege** IAM\n- Enable **rotation**\n- Prevent secret logging; encrypt\n- Add CI/CD secret scanning",
      "Url": "https://hub.prowler.com/check/awslambda_function_no_secrets_in_code"
    }
  },
  "Categories": [
    "secrets"
  ],
  "DependsOn": [],
  "RelatedTo": [],
  "Notes": ""
}
