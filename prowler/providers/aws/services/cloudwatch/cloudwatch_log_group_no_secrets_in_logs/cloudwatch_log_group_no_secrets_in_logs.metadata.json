{
  "Provider": "aws",
  "CheckID": "cloudwatch_log_group_no_secrets_in_logs",
  "CheckTitle": "CloudWatch log group contains no secrets in its log events",
  "CheckType": [
    "Software and Configuration Checks/AWS Security Best Practices/Runtime Behavior Analysis",
    "Sensitive Data Identifications/Passwords",
    "Sensitive Data Identifications/Security",
    "Effects/Data Exposure"
  ],
  "ServiceName": "cloudwatch",
  "SubServiceName": "",
  "ResourceIdTemplate": "",
  "Severity": "medium",
  "ResourceType": "Other",
  "Description": "**CloudWatch Logs** log groups are analyzed for potential **secrets** embedded in log events across their streams. Detection flags patterns resembling credentials (API keys, passwords, tokens, keys) and reports the secret types and where they appear within the log group.",
  "Risk": "Leaked **credentials in logs** erode confidentiality and enable unauthorized API calls. Attackers reusing tokens/keys can escalate privileges, alter resources, and exfiltrate data. Subscriptions and exports widen exposure, and users with `logs:Unmask` can reveal values, increasing the blast radius.",
  "RelatedUrl": "",
  "AdditionalURLs": [
    "https://support.icompaas.com/support/solutions/articles/62000233413-ensure-secrets-are-not-logged-in-cloudwatch-logs",
    "https://awsfundamentals.com/blog/masking-sensitive-data-with-amazon-cloudwatch-logs-data-protection-policies",
    "https://repost.aws/questions/QUermjg18CSMqfSKo4CuTAaA/hide-sensitive-data-in-cloudwatch-logs",
    "https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/mask-sensitive-log-data.html",
    "https://levelup.gitconnected.com/masking-sensitive-data-in-aws-cloudwatch-logs-1b3c66d0ddcb"
  ],
  "Remediation": {
    "Code": {
      "CLI": "aws logs put-data-protection-policy --log-group-identifier <example_resource_name> --policy-document '{\"Statement\":[{\"DataIdentifier\":[\"arn:aws:dataprotection::aws:data-identifier/Credentials\"],\"Operation\":{\"Audit\":{\"FindingsDestination\":{}}}},{\"DataIdentifier\":[\"arn:aws:dataprotection::aws:data-identifier/Credentials\"],\"Operation\":{\"Deidentify\":{\"MaskConfig\":{}}}}]}'",
      "NativeIaC": "```yaml\n# CloudFormation: apply data protection policy to mask secrets in a log group\nResources:\n  LogGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: <example_resource_name>\n      # Critical: Enables masking of detected credentials at egress so secrets aren't exposed\n      DataProtectionPolicy: |\n        {\"Statement\":[{\"DataIdentifier\":[\"arn:aws:dataprotection::aws:data-identifier/Credentials\"],\"Operation\":{\"Audit\":{\"FindingsDestination\":{}}}},{\"DataIdentifier\":[\"arn:aws:dataprotection::aws:data-identifier/Credentials\"],\"Operation\":{\"Deidentify\":{\"MaskConfig\":{}}}}]}\n```",
      "Other": "1. In AWS Console, go to CloudWatch > Logs > Log groups and open <example_resource_name>\n2. Select the Data protection tab and click Create policy\n3. Under Managed data identifiers, select Credentials (or AwsSecretKey if listed)\n4. Click Activate data protection to save\n5. Re-ingest or generate new logs to ensure sensitive data is masked",
      "Terraform": "```hcl\n# Apply a CloudWatch Logs data protection policy to mask secrets\nresource \"aws_cloudwatch_log_group\" \"log_group\" {\n  name = \"<example_resource_name>\"\n\n  # Critical: Masks detected credentials so secrets aren't visible and the check passes\n  data_protection_policy = jsonencode({\n    Statement = [\n      {\n        DataIdentifier = [\n          \"arn:aws:dataprotection::aws:data-identifier/Credentials\"\n        ]\n        Operation = { Audit = { FindingsDestination = {} } }\n      },\n      {\n        DataIdentifier = [\n          \"arn:aws:dataprotection::aws:data-identifier/Credentials\"\n        ]\n        Operation = { Deidentify = { MaskConfig = {} } }\n      }\n    ]\n  })\n}\n```"
    },
    "Recommendation": {
      "Text": "Avoid logging **secrets** via application sanitization and data minimization. Apply CloudWatch data protection policies to audit and mask sensitive patterns. Enforce *least privilege* for log readers and restrict `logs:Unmask`. Rotate exposed keys, reduce retention, and monitor findings to validate controls.",
      "Url": "https://hub.prowler.com/check/cloudwatch_log_group_no_secrets_in_logs"
    }
  },
  "Categories": [
    "secrets"
  ],
  "DependsOn": [],
  "RelatedTo": [],
  "Notes": ""
}
