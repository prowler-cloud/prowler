from typing import List

from prowler.lib.check.models import Check, CheckReportM365
from prowler.providers.m365.services.defender.defender_client import defender_client


class defender_malware_policy_comprehensive_attachments_filter_applied(Check):
    """
    Verifies if the Common Attachment Types Filter is enabled in the Defender anti-malware policy in a comprehensive way.

    Attributes:
        metadata: Metadata associated with the check (inherited from Check).
    """

    def execute(self) -> List[CheckReportM365]:
        """
        Executes the check to determine if the Common Attachment Types Filter is enabled.

        This method evaluates the Defender anti-malware policy to ensure it is enabled and the
        Common Attachment Types Filter is active and applied to the recommended file types.

        Returns:
            List[CheckReportM365]: A list of reports with the results of the check.
        """
        findings = []

        # Default to Microsoft-recommended common file types
        default_recommended_extensions = [
            "ace",
            "ani",
            "apk",
            "app",
            "appx",
            "arj",
            "bat",
            "cab",
            "cmd",
            "com",
            "deb",
            "dex",
            "dll",
            "docm",
            "elf",
            "exe",
            "hta",
            "img",
            "iso",
            "jar",
            "jnlp",
            "kext",
            "lha",
            "lib",
            "library",
            "lnk",
            "lzh",
            "macho",
            "msc",
            "msi",
            "msix",
            "msp",
            "mst",
            "pif",
            "ppa",
            "ppam",
            "reg",
            "rev",
            "scf",
            "scr",
            "sct",
            "sys",
            "uif",
            "vb",
            "vbe",
            "vbs",
            "vxd",
            "wsc",
            "wsf",
            "wsh",
            "xll",
            "xz",
            "z",
        ]

        # Load extensions from audit_config (user config), fallback to default
        recommended_extensions = defender_client.audit_config.get(
            "recommended_blocked_file_types", default_recommended_extensions
        )

        if defender_client.malware_policies:
            # Only Default Defender Malware Policy exists
            default_policy = defender_client.malware_policies[0]
            if not defender_client.malware_rules:
                report = CheckReportM365(
                    metadata=self.metadata(),
                    resource=default_policy,
                    resource_name=default_policy.identity,
                    resource_id="defaultDefenderMalwarePolicy",
                )

                if self._is_filter_properly_configured(
                    default_policy, recommended_extensions
                ):
                    # Case 1: Default policy exists and has filter properly configured
                    report.status = "PASS"
                    report.status_extended = "Common Attachment Types Filter is enabled in the default Defender Malware Policy and applied to all recommended file types (no other policies exist)."
                else:
                    # Case 5: Default policy exists but doesn't have filter properly configured
                    missing = self._get_missing_extensions(
                        default_policy, recommended_extensions
                    )
                    report.status = "FAIL"
                    report.status_extended = f"Common Attachment Types Filter is not properly configured in the default Defender Malware Policy (no other policies exist). Missing recommended file types: {', '.join(missing)}."
                findings.append(report)

            # Multiple Defender Malware Policies exist
            else:
                misconfigured_policies = []
                report = None
                for policy in defender_client.malware_policies:
                    if policy.is_default:
                        if not self._is_filter_properly_configured(
                            policy, recommended_extensions
                        ):
                            # Case 4: Default policy doesn't have filter properly configured (potential false positive if another policy overrides it)
                            missing = self._get_missing_extensions(
                                policy, recommended_extensions
                            )
                            report = CheckReportM365(
                                metadata=self.metadata(),
                                resource=policy,
                                resource_name=policy.identity,
                                resource_id="defaultDefenderMalwarePolicy",
                            )
                            report.status = "FAIL"
                            report.status_extended = f"Common Attachment Types Filter is not properly configured in the default Defender Malware Policy, but could be overridden by another policy which is out of Prowler's scope. Missing recommended file types: {', '.join(missing)}."
                            findings.append(report)
                            break
                    else:
                        if not self._is_filter_properly_configured(
                            policy, recommended_extensions
                        ):
                            misconfigured_policies.append(policy.identity)

                if misconfigured_policies:
                    # Case 3: Default policy has filter properly configured but some other policies don't
                    report = CheckReportM365(
                        metadata=self.metadata(),
                        resource={},
                        resource_name="Defender Malware Policies",
                        resource_id="defenderMalwarePolicies",
                    )
                    report.status = "FAIL"
                    report.status_extended = f"Common Attachment Types Filter is properly configured in default Defender Malware Policy but not in the following Defender Malware Policies that may override it: {', '.join(misconfigured_policies)}."
                    findings.append(report)
                elif not report:
                    # Case 2: Default policy has filter properly configured and all other policies do too
                    report = CheckReportM365(
                        metadata=self.metadata(),
                        resource={},
                        resource_name="Defender Malware Policies",
                        resource_id="defenderMalwarePolicies",
                    )
                    report.status = "PASS"
                    report.status_extended = "Common Attachment Types Filter is properly configured in all Defender Malware Policies."
                    findings.append(report)

        return findings

    def _is_filter_properly_configured(self, policy, recommended_extensions) -> bool:
        """
        Check if the Common Attachment Types Filter is properly configured in the policy.

        Args:
            policy: The malware policy to check.
            recommended_extensions: List of recommended file extensions to block.

        Returns:
            bool: True if the filter is properly configured, False otherwise.
        """
        if not policy.enable_file_filter:
            return False

        if (
            not policy.is_default
            and policy.identity in defender_client.malware_rules
            and defender_client.malware_rules[policy.identity].state.lower()
            != "enabled"
        ):
            return False

        blocked_extensions = [ext.lower() for ext in policy.file_types]
        return all(ext.lower() in blocked_extensions for ext in recommended_extensions)

    def _get_missing_extensions(self, policy, recommended_extensions) -> List[str]:
        """
        Get the list of missing recommended extensions in the policy.

        Args:
            policy: The malware policy to check.
            recommended_extensions: List of recommended file extensions to block.

        Returns:
            List[str]: List of missing recommended extensions.
        """
        if not policy.enable_file_filter:
            return recommended_extensions

        blocked_extensions = [ext.lower() for ext in policy.file_types]
        return [
            ext
            for ext in recommended_extensions
            if ext.lower() not in blocked_extensions
        ]
