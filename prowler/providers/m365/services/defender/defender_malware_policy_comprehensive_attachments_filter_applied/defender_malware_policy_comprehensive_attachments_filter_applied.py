from typing import List

from prowler.lib.check.models import Check, CheckReportM365
from prowler.providers.m365.services.defender.defender_client import defender_client


class defender_malware_policy_comprehensive_attachments_filter_applied(Check):
    """
    Verifies if the Common Attachment Types Filter is enabled in the Defender anti-malware policy in a comprehensive way.

    Attributes:
        metadata: Metadata associated with the check (inherited from Check).
    """

    def execute(self) -> List[CheckReportM365]:
        """
        Executes the check to determine if the Common Attachment Types Filter is enabled.

        This method evaluates the Defender anti-malware policy to ensure it is enabled and the
        Common Attachment Types Filter is active and applied to the recommended file types.

        Returns:
            List[CheckReportM365]: A list of reports with the results of the check.
        """
        findings = []

        # Default to Microsoft-recommended common file types
        default_recommended_extensions = [
            "ace",
            "ani",
            "apk",
            "app",
            "appx",
            "arj",
            "bat",
            "cab",
            "cmd",
            "com",
            "deb",
            "dex",
            "dll",
            "docm",
            "elf",
            "exe",
            "hta",
            "img",
            "iso",
            "jar",
            "jnlp",
            "kext",
            "lha",
            "lib",
            "library",
            "lnk",
            "lzh",
            "macho",
            "msc",
            "msi",
            "msix",
            "msp",
            "mst",
            "pif",
            "ppa",
            "ppam",
            "reg",
            "rev",
            "scf",
            "scr",
            "sct",
            "sys",
            "uif",
            "vb",
            "vbe",
            "vbs",
            "vxd",
            "wsc",
            "wsf",
            "wsh",
            "xll",
            "xz",
            "z",
        ]

        # Load extensions from audit_config (user config), fallback to default
        recommended_extensions = defender_client.audit_config.get(
            "recommended_blocked_file_types", default_recommended_extensions
        )

        if not defender_client.malware_policies:
            report = CheckReportM365(
                metadata=self.metadata(),
                resource={},
                resource_name="Defender Malware Policy",
                resource_id="defenderMalwarePolicy",
            )
            report.status = "FAIL"
            report.status_extended = "Common Attachment Types Filter is not enabled."
            findings.append(report)
        else:
            for policy in defender_client.malware_policies:
                report = CheckReportM365(
                    metadata=self.metadata(),
                    resource=policy,
                    resource_name="Defender Malware Policy",
                    resource_id="defenderMalwarePolicy",
                )
                report.status = "FAIL"
                report.status_extended = f"Common Attachment Types Filter is not properly configured in anti-malware policy {policy.identity}."

                if not policy.enable_file_filter:
                    report.status_extended = f"Common Attachment Types Filter is not enabled in anti-malware policy {policy.identity}."
                    break

                if (
                    not policy.is_default
                    and policy.identity in defender_client.malware_rules
                ) or policy.is_default:
                    if (
                        not policy.is_default
                        and defender_client.malware_rules[policy.identity].state.lower()
                        == "enabled"
                    ) or policy.is_default:
                        blocked_extensions = [ext.lower() for ext in policy.file_types]
                        missing = [
                            ext
                            for ext in recommended_extensions
                            if ext.lower() not in blocked_extensions
                        ]

                        if missing:
                            report.status_extended = f"Common Attachment Types Filter is enabled in anti-malware policy {policy.identity}, but the following recommended file types are missing: {', '.join(missing)}."
                            break

                        report.status = "PASS"
                        report.status_extended = f"Common Attachment Types Filter is enabled in anti-malware policy {policy.identity}, the policy is enabled and the filter is applied to the recommended file types."

                    else:
                        report.status_extended = f"Common Attachment Types Filter is enabled in anti-malware policy {policy.identity}, but the policy is disabled."
                        break

            findings.append(report)

        return findings
