{
  "Provider": "kubernetes",
  "CheckID": "etcd_peer_tls_config",
  "CheckTitle": "Etcd pod uses TLS for peer connections",
  "CheckType": [],
  "ServiceName": "etcd",
  "SubServiceName": "",
  "ResourceIdTemplate": "",
  "Severity": "high",
  "ResourceType": "Pod",
  "Description": "**Etcd peer communication** is treated as secure when **TLS** is configured with a peer certificate and key (e.g., `--peer-cert-file` and `--peer-key-file`). The assessment inspects etcd containers for these options to determine whether server-to-server traffic is encrypted and authenticated.",
  "Risk": "Without **TLS** on peer links, attackers can intercept or alter Raft traffic, enabling node impersonation and **consensus manipulation**. This endangers **confidentiality** (exposed cluster state), **integrity** (tampered writes), and **availability** (quorum disruption), cascading into control-plane instability.",
  "RelatedUrl": "",
  "AdditionalURLs": [
    "https://etcd.io/docs/latest/op-guide/security/",
    "https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/#securing-communication",
    "https://github.com/etcd-io/etcd"
  ],
  "Remediation": {
    "Code": {
      "CLI": "kubectl -n kube-system patch pod <example_resource_name> --type='json' -p='[{\"op\":\"add\",\"path\":\"/spec/containers/0/command/-\",\"value\":\"--peer-cert-file=</path/to/peer-cert-file>\"},{\"op\":\"add\",\"path\":\"/spec/containers/0/command/-\",\"value\":\"--peer-key-file=</path/to/peer-key-file>\"}]'",
      "NativeIaC": "",
      "Other": "1. SSH to the control plane node running etcd\n2. Open /etc/kubernetes/manifests/etcd.yaml\n3. Under spec.containers[0].command add:\n   - --peer-cert-file=</path/to/peer-cert-file>\n   - --peer-key-file=</path/to/peer-key-file>\n4. Save the file; kubelet will restart the etcd Pod automatically\n5. Verify the etcd container command includes both flags",
      "Terraform": "```hcl\nresource \"kubernetes_pod\" \"<example_resource_name>\" {\n  metadata {\n    name = \"<example_resource_name>\"\n  }\n  spec {\n    container {\n      name  = \"etcd\"\n      image = \"quay.io/coreos/etcd:latest\"\n      command = [\n        \"etcd\",\n        \"--peer-cert-file=</path/to/peer-cert-file>\", # Critical: enables TLS for peer connections\n        \"--peer-key-file=</path/to/peer-key-file>\"   # Critical: key for the peer TLS cert\n      ]\n    }\n  }\n}\n```"
    },
    "Recommendation": {
      "Text": "Enforce **TLS** for etcd peer communication with unique certificates per member and mutual authentication. Apply strong cipher suites and modern protocol versions, rotate keys, and separate CAs for peers and clients. Limit network access to peer ports to trusted nodes, following **least privilege** and **defense in depth**.",
      "Url": "https://hub.prowler.com/check/etcd_peer_tls_config"
    }
  },
  "Categories": [
    "encryption",
    "cluster-security"
  ],
  "DependsOn": [],
  "RelatedTo": [],
  "Notes": "This check is only applicable for etcd clusters. For single etcd server setups, this recommendation does not apply."
}
