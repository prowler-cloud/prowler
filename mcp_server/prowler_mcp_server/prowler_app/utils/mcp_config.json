{
  "endpoints": {
    "* /api/v1/providers*": {
      "parameters": {
        "id": {
          "name": "provider_id",
          "description": "The UUID of the provider. This UUID is generated by Prowler and it is not related with the UID of the provider (that is the one that is set by the provider).\n\tThe format is UUIDv4: \"4d0e2614-6385-4fa7-bf0b-c2e2f75c6877\""
        }
      }
    },
    "GET /api/v1/providers": {
      "name": "list_providers",
      "description": "List all providers with options for filtering by various criteria.",
      "parameters": {
        "fields[providers]": {
          "name": "fields",
          "description": "The tool will return only the specified fields, if not set all are returned (comma-separated, e.g. \"uid,delta,status\")"
        },
        "filter[alias]": {
          "name": "filter_alias",
          "description": "Filter by exact alias name"
        },
        "filter[alias__icontains]": {
          "name": "filter_alias_contains",
          "description": "Filter by partial alias match"
        },
        "filter[alias__in]": {
          "name": "filter_alias_in",
          "description": "Filter by multiple aliases (comma-separated, e.g. \"aws_alias_1,azure_alias_2\"). Useful when searching for multiple providers at once."
        },
        "filter[connected]": {
          "name": "filter_connected",
          "description": "Filter by connected status (True for connected, False for connection failed, if not set all both are returned).\n\tIf the connection haven't been attempted yet, the status will be None and does not apply for this filter."
        },
        "filter[id]": {
          "name": "filter_id",
          "description": "Filter by exact ID of the provider (UUID)"
        },
        "filter[id__in]": {
          "name": "filter_id_in",
          "description": "Filter by multiple IDs of the providers (comma-separated UUIDs, e.g. \"a1b2c3d4-5678-90ab-cdef-1234567890ab,deadbeef-1234-5678-9abc-def012345678,0f1e2d3c-4b5a-6978-8c9d-0e1f2a3b4c5d\"). Useful when searching for multiple providers at once."
        },
        "filter[inserted_at]": {
          "name": "filter_inserted_at",
          "description": "Filter by exact date (format: YYYY-MM-DD). This is the date when the provider was inserted into the database."
        },
        "filter[inserted_at__gte]": {
          "name": "filter_inserted_at_gte",
          "description": "Filter providers inserted on or after this date (format: YYYY-MM-DD)"
        },
        "filter[inserted_at__lte]": {
          "name": "filter_inserted_at_lte",
          "description": "Filter providers inserted on or before this date (format: YYYY-MM-DD)"
        },
        "filter[provider]": {
          "name": "filter_provider",
          "description": "Filter by single provider type"
        },
        "filter[provider__in]": {
          "name": "filter_provider_in",
          "description": "Filter by multiple provider types (comma-separated, e.g. \"aws,azure,gcp\")"
        },
        "filter[search]": {
          "name": "filter_search",
          "description": "A search term accross \"provider\", \"alias\" and \"uid\""
        },
        "filter[uid]": {
          "name": "filter_uid",
          "description": "Filter by exact finding UID"
        },
        "filter[uid__icontains]": {
          "name": "filter_uid_contains",
          "description": "Filter by partial finding UID match"
        },
        "filter[uid__in]": {
          "name": "filter_uid_in",
          "description": "Filter by multiple UIDs (comma-separated UUIDs)"
        },
        "filter[updated_at]": {
          "name": "filter_updated_at",
          "description": "Filter by exact date (format: YYYY-MM-DD). This is the date when the provider was updated in the database."
        },
        "filter[updated_at__gte]": {
          "name": "filter_updated_at_gte",
          "description": "Filter providers updated on or after this date (format: YYYY-MM-DD)"
        },
        "filter[updated_at__lte]": {
          "name": "filter_updated_at_lte",
          "description": "Filter providers updated on or before this date (format: YYYY-MM-DD)"
        },
        "include": {
          "name": "include",
          "description": "Include related resources in the response, for now only \"provider_groups\" is supported"
        },
        "page[number]": {
          "name": "page_number",
          "description": "Page number to retrieve (default: 1)"
        },
        "page[size]": {
          "name": "page_size",
          "description": "Number of results per page (default: 100)"
        },
        "sort": {
          "name": "sort",
          "description": "Sort the results by the specified fields. Use '-' prefix for descending order. (e.g. \"-provider,inserted_at\", this first sorts by provider alphabetically and then inside of each category by inserted_at date)"
        }
      }
    },
    "POST /api/v1/providers": {
      "name": "create_provider",
      "description": "Create a new provider in the current Prowler Tenant.\n\tThis is just for creating a new provider, not for adding/configuring credentials. To add credentials to an existing provider, use tool add_provider_secret from Prowler MCP server",
      "parameters": {
        "alias": {
          "description": "Pseudonym name to identify the provider"
        },
        "provider": {
          "description": "Type of provider to create"
        },
        "uid": {
          "description": "UID for the provider. This UID is dependent on the provider type: \n\tAWS: AWS account ID\n\tAzure: Azure subscription ID\n\tGCP: GCP project ID\n\tKubernetes: Kubernetes namespace\n\tM365: M365 domain ID\n\tGitHub: GitHub username or organization name"
        }
      }
    },
    "GET /api/v1/providers/{id}": {
      "name": "get_provider",
      "description": "Get detailed information about a specific provider",
      "parameters": {
        "fields[providers]": {
          "name": "fields",
          "description": "The tool will return only the specified fields, if not set all are returned (comma-separated, e.g. \"uid,alias,connection\")."
        },
        "include": {
          "description": "Include related resources in the response, for now only \"provider_groups\" is supported"
        }
      }
    },
    "PATCH /api/v1/providers/{id}": {
      "name": "update_provider",
      "description": "Update the details of a specific provider",
      "parameters": {
        "alias": {
          "description": "Pseudonym name to identify the provider, if not set, the alias will not be updated"
        }
      }
    },
    "DELETE /api/v1/providers/{id}": {
      "name": "delete_provider",
      "description": "Delete a specific provider"
    },
    "POST /api/v1/providers/{id}/connection": {
      "name": "test_provider_connection",
      "description": "Test the connection status of a specific provider with the credentials set in the provider secret. Needed to be done before running a scan."
    },
    "GET /api/v1/providers/secrets": {
      "name": "list_provider_secrets",
      "description": "List all provider secrets with options for filtering by various criteria",
      "parameters": {
        "fields[provider-secrets]": {
          "name": "fields",
          "description": "The tool will return only the specified fields, if not set all are returned (comma-separated, e.g. \"name,secret_type,provider\")"
        },
        "filter[inserted_at]": {
          "name": "filter_inserted_at",
          "description": "Filter by exact date when the secret was inserted (format: YYYY-MM-DD)"
        },
        "filter[name]": {
          "name": "filter_name",
          "description": "Filter by exact secret name"
        },
        "filter[name__icontains]": {
          "name": "filter_name_contains",
          "description": "Filter by partial secret name match"
        },
        "filter[provider]": {
          "name": "filter_provider",
          "description": "Filter by prowler provider UUID (UUIDv4)"
        },
        "filter[search]": {
          "name": "filter_search",
          "description": "Search term in name attribute"
        },
        "filter[updated_at]": {
          "name": "filter_updated_at",
          "description": "Filter by exact update date (format: YYYY-MM-DD)"
        },
        "page[number]": {
          "name": "page_number",
          "description": "Page number to retrieve (default: 1)"
        },
        "page[size]": {
          "name": "page_size",
          "description": "Number of results per page"
        },
        "sort": {
          "name": "sort",
          "description": "Sort the results by the specified fields. You can specify multiple fields separated by commas; the results will be sorted by the first field, then by the second within each group of the first, and so on. Use '-' as a prefix to a field name for descending order (e.g. \"-name,inserted_at\" sorts by name descending, then by inserted_at ascending within each name). If not set, the default sort order will be applied"
        }
      }
    },
    "* /api/v1/providers/secrets*": {
      "parameters": {
        "secret": {
          "name": "credentials",
          "description": "Provider-specific credentials dictionary. Supported formats:\n            - AWS Static: {\"aws_access_key_id\": \"...\", \"aws_secret_access_key\": \"...\", \"aws_session_token\": \"...\"}\n            - AWS Assume Role: {\"role_arn\": \"...\", \"external_id\": \"...\", \"session_duration\": 3600, \"role_session_name\": \"...\"}\n            - Azure: {\"tenant_id\": \"...\", \"client_id\": \"...\", \"client_secret\": \"...\"}\n            - M365: {\"tenant_id\": \"...\", \"client_id\": \"...\", \"client_secret\": \"...\", \"user\": \"...\", \"password\": \"...\"}\n            - GCP Static: {\"client_id\": \"...\", \"client_secret\": \"...\", \"refresh_token\": \"...\"}\n            - GCP Service Account: {\"service_account_key\": {...}}\n            - Kubernetes: {\"kubeconfig_content\": \"...\"}\n            - GitHub PAT: {\"personal_access_token\": \"...\"}\n            - GitHub OAuth: {\"oauth_app_token\": \"...\"}\n            - GitHub App: {\"github_app_id\": 123, \"github_app_key\": \"path/to/key\"}"
        },
        "secret_type": {
          "description": "Type of secret:\n\tstatic: Static credentials\n\trole: Assume role credentials (for now only AWS is supported)\n\tservice_account: Service account credentials (for now only GCP is supported)"
        }
      }
    },
    "POST /api/v1/providers/secrets": {
      "name": "add_provider_secret",
      "description": "Add or update complete credentials for an existing provider",
      "parameters": {
        "provider_id": {
          "description": "The UUID of the provider. This UUID is generated by Prowler and it is not related with the UID of the provider, the format is UUIDv4: \"4d0e2614-6385-4fa7-bf0b-c2e2f75c6877\""
        },
        "name": {
          "name": "secret_name",
          "description": "Name for the credential secret. This must be between 3 and 100 characters long"
        }
      }
    },
    "GET /api/v1/providers/secrets/{id}": {
      "name": "get_provider_secret",
      "description": "Get detailed information about a specific provider secret",
      "parameters": {
        "id": {
          "name": "provider_secret_id",
          "description": "The UUID of the provider secret"
        },
        "fields[provider-secrets]": {
          "name": "fields",
          "description": "The tool will return only the specified fields, if not set all are returned (comma-separated, e.g. \"name,secret_type,provider\")"
        }
      }
    },
    "PATCH /api/v1/providers/secrets/{id}": {
      "name": "update_provider_secret",
      "description": "Update the details of a specific provider secret",
      "parameters": {
        "id": {
          "name": "provider_secret_id",
          "description": "The UUID of the provider secret."
        },
        "name": {
          "name": "secret_name",
          "description": "Name for the credential secret. This must be between 3 and 100 characters long"
        }
      }
    },
    "DELETE /api/v1/providers/secrets/{id}": {
      "name": "delete_provider_secret",
      "description": "Delete a specific provider secret",
      "parameters": {
        "id": {
          "name": "provider_secret_id",
          "description": "The UUID of the provider secret."
        }
      }
    },
    "GET /api/v1/findings*": {
      "parameters": {
        "fields[findings]": {
          "name": "fields",
          "description": "The tool will return only the specified fields, if not set all are returned (comma-separated, e.g. \"uid,delta,status,status_extended,severity,check_id,scan\")"
        },
        "filter[check_id]": {
          "name": "filter_check_id",
          "description": "Filter by exact check ID (e.g. ec2_launch_template_imdsv2_required). To get the list of available checks for a provider, use tool get_checks from Prowler Hub MCP server"
        },
        "filter[check_id__icontains]": {
          "name": "filter_check_id_contains",
          "description": "Filter by partial check ID match (e.g. \"iam\" matches all IAM-related checks for all providers)"
        },
        "filter[check_id__in]": {
          "name": "filter_check_id_in",
          "description": "Filter by multiple check IDs (comma-separated, e.g. \"ec2_launch_template_imdsv2_required,bedrock_guardrail_prompt_attack_filter_enabled,vpc_endpoint_multi_az_enabled\")"
        },
        "filter[delta]": {
          "name": "filter_delta",
          "description": "Filter by finding delta status"
        },
        "filter[id]": {
          "name": "filter_id",
          "description": "Filter by exact finding ID (main key in the database, it is a UUIDv7). It is not the same as the finding UID."
        },
        "filter[id__in]": {
          "name": "filter_id_in",
          "description": "Filter by multiple finding IDs (comma-separated UUIDs)"
        },
        "filter[inserted_at]": {
          "name": "filter_inserted_at",
          "description": "Filter by exact date (format: YYYY-MM-DD)."
        },
        "filter[inserted_at__date]": {
          "name": "filter_inserted_at_date",
          "description": "Filter by exact date (format: YYYY-MM-DD). Same as filter_inserted_at parameter."
        },
        "filter[inserted_at__gte]": {
          "name": "filter_inserted_at_gte",
          "description": "Filter findings inserted on or after this date (format: YYYY-MM-DD)"
        },
        "filter[inserted_at__lte]": {
          "name": "filter_inserted_at_lte",
          "description": "Filter findings inserted on or before this date (format: YYYY-MM-DD)"
        },
        "filter[muted]": {
          "name": "filter_muted",
          "description": "Filter by muted status (True for muted, False for non-muted, if not set all both are returned). A muted finding is a finding that has been muted by the user to ignore it."
        },
        "filter[provider]": {
          "name": "filter_provider",
          "description": "Filter by exact provider UUID (UUIDv4). This UUID is generated by Prowler and it is not related with the UID of the provider (that is the one that is set by the provider). The format is UUIDv4: \"4d0e2614-6385-4fa7-bf0b-c2e2f75c6877\""
        },
        "filter[provider__in]": {
          "name": "filter_provider_in",
          "description": "Filter by multiple provider UUIDs (comma-separated UUIDs, e.g. \"4d0e2614-6385-4fa7-bf0b-c2e2f75c6877,deadbeef-1234-5678-9abc-def012345678,0f1e2d3c-4b5a-6978-8c9d-0e1f2a3b4c5d\"). Useful when searching for multiple providers at once."
        },
        "filter[provider_alias]": {
          "name": "filter_provider_alias",
          "description": "Filter by exact provider alias name"
        },
        "filter[provider_alias__icontains]": {
          "name": "filter_provider_alias_contains",
          "description": "Filter by partial provider alias match"
        },
        "filter[provider_alias__in]": {
          "name": "filter_provider_alias_in",
          "description": "Filter by multiple provider aliases (comma-separated)"
        },
        "filter[provider_id]": {
          "name": "filter_provider_id",
          "description": "Filter by exact provider ID (UUID)"
        },
        "filter[provider_id__in]": {
          "name": "filter_provider_id_in",
          "description": "Filter by multiple provider IDs (comma-separated UUIDs)"
        },
        "filter[provider_type]": {
          "name": "filter_provider_type",
          "description": "Filter by single provider type"
        },
        "filter[provider_type__in]": {
          "name": "filter_provider_type_in",
          "description": "Filter by multiple provider types (comma-separated, e.g. \"aws,azure,gcp\"). Allowed values are: aws, azure, gcp, kubernetes, m365, github"
        },
        "filter[provider_uid]": {
          "name": "filter_provider_uid",
          "description": "Filter by exact provider UID. This UID is dependent on the provider type: \n\tAWS: AWS account ID\n\tAzure: Azure subscription ID\n\tGCP: GCP project ID\n\tKubernetes: Kubernetes namespace\n\tM365: M365 domain ID\n\tGitHub: GitHub username or organization name"
        },
        "filter[provider_uid__icontains]": {
          "name": "filter_provider_uid_contains",
          "description": "Filter by partial provider UID match"
        },
        "filter[provider_uid__in]": {
          "name": "filter_provider_uid_in",
          "description": "Filter by multiple provider UIDs (comma-separated UUIDs)"
        },
        "filter[region]": {
          "name": "filter_region",
          "description": "Filter by exact region name (e.g. us-east-1, eu-west-1, etc.). To get a list of available regions in a subset of findings, use tool get_findings_metadata from Prowler MCP server"
        },
        "filter[region__icontains]": {
          "name": "filter_region_contains",
          "description": "Filter by partial region match (e.g. \"us-\" matches all US regions)"
        },
        "filter[region__in]": {
          "name": "filter_region_in",
          "description": "Filter by multiple regions (comma-separated, e.g. \"us-east-1,us-west-2,eu-west-1\")"
        },
        "filter[resource_name]": {
          "name": "filter_resource_name",
          "description": "Filter by exact resource name that finding is associated with"
        },
        "filter[resource_name__icontains]": {
          "name": "filter_resource_name_contains",
          "description": "Filter by partial resource name match that finding is associated with"
        },
        "filter[resource_name__in]": {
          "name": "filter_resource_name_in",
          "description": "Filter by multiple resource names (comma-separated) that finding is associated with"
        },
        "filter[resource_type]": {
          "name": "filter_resource_type",
          "description": "Filter by exact resource type that finding is associated with"
        },
        "filter[resource_type__icontains]": {
          "name": "filter_resource_type_contains",
          "description": "Filter by partial resource type match that finding is associated with"
        },
        "filter[resource_type__in]": {
          "name": "filter_resource_type_in",
          "description": "Filter by multiple resource types (comma-separated) that finding is associated with"
        },
        "filter[resource_uid]": {
          "name": "filter_resource_uid",
          "description": "Filter by exact resource UID that finding is associated with"
        },
        "filter[resource_uid__icontains]": {
          "name": "filter_resource_uid_contains",
          "description": "Filter by partial resource UID match that finding is associated with"
        },
        "filter[resource_uid__in]": {
          "name": "filter_resource_uid_in",
          "description": "Filter by multiple resource UIDss (comma-separated) that finding is associated with"
        },
        "filter[resources]": {
          "name": "filter_resources",
          "description": "Filter by multiple resources (comma-separated) that finding is associated with. The accepted vaules are internal Prowler generated resource UUIDs"
        },
        "filter[scan]": {
          "name": "filter_scan",
          "description": "Filter by scan UUID"
        },
        "filter[scan__in]": {
          "name": "filter_scan_in",
          "description": "Filter by multiple scan UUIDs (comma-separated UUIDs)"
        },
        "filter[service]": {
          "name": "filter_service",
          "description": "Filter by exact service name (e.g. s3, rds, ec2, keyvault, etc.). To get the list of available services, use tool list_providers from Prowler Hub MCP server"
        },
        "filter[service__icontains]": {
          "name": "filter_service_contains",
          "description": "Filter by partial service name match (e.g. \"storage\" matches all storage-related services)"
        },
        "filter[service__in]": {
          "name": "filter_service_in",
          "description": "Filter by multiple service names (comma-separated, e.g. \"s3,ec2,iam\")"
        },
        "filter[severity]": {
          "name": "filter_severity",
          "description": "Filter by single severity (critical, high, medium, low, informational)"
        },
        "filter[severity__in]": {
          "name": "filter_severity_in",
          "description": "Filter by multiple severities (comma-separated, e.g. \"critical,high\")"
        },
        "filter[status]": {
          "name": "filter_status",
          "description": "Filter by single status"
        },
        "filter[status__in]": {
          "name": "filter_status_in",
          "description": "Filter by multiple statuses (comma-separated, e.g. \"FAIL,MANUAL\"). Allowed values are: PASS, FAIL, MANUAL"
        },
        "filter[uid]": {
          "name": "filter_uid",
          "description": "Filter by exact finding UID assigned by Prowler"
        },
        "filter[uid__in]": {
          "name": "filter_uid_in",
          "description": "Filter by multiple finding UIDs (comma-separated UUIDs)"
        },
        "filter[updated_at]": {
          "name": "filter_updated_at",
          "description": "Filter by exact update date (format: YYYY-MM-DD)"
        },
        "filter[updated_at__gte]": {
          "name": "filter_updated_at_gte",
          "description": "Filter by update date on or after this date (format: YYYY-MM-DD)"
        },
        "filter[updated_at__lte]": {
          "name": "filter_updated_at_lte",
          "description": "Filter by update date on or before this date (format: YYYY-MM-DD)"
        },
        "include": {
          "name": "include",
          "description": "Include related resources in the response, supported values are: \"resources\" and \"scan\""
        },
        "page[number]": {
          "name": "page_number",
          "description": "Page number to retrieve (default: 1)"
        },
        "page[size]": {
          "name": "page_size",
          "description": "Number of results per page (default: 100)"
        },
        "sort": {
          "name": "sort",
          "description": "Sort the results by the specified fields. You can specify multiple fields separated by commas; the results will be sorted by the first field, then by the second within each group of the first, and so on. Use '-' as a prefix to a field name for descending order (e.g. \"status,-severity\" sorts by status ascending alphabetically and then by severity descending within each status alphabetically)"
        }
      }
    },
    "GET /api/v1/findings": {
      "name": "list_findings",
      "description": "List security findings from Prowler scans with advanced filtering.\n\tAt least one of the variations of the filter[inserted_at] is required. If not provided, defaults to findings from the last day."
    },
    "GET /api/v1/findings/{id}": {
      "name": "get_finding",
      "description": "Get detailed information about a specific security finding",
      "parameters": {
        "id": {
          "name": "finding_id",
          "description": "The UUID of the finding"
        }
      }
    },
    "GET /api/v1/findings/latest": {
      "name": "get_latest_findings",
      "description": "Retrieve a list of the latest findings from the latest scans for each provider with advanced filtering options"
    },
    "GET /api/v1/findings/metadata": {
      "name": "get_findings_metadata",
      "description": "Fetch unique metadata values from a filtered set of findings. This is useful for dynamic filtering",
      "parameters": {
        "fields[findings-metadata]": {
          "name": "metadata_fields",
          "description": "Specific metadata fields to return (comma-separated, e.g. 'regions,services,check_ids')"
        }
      }
    },
    "GET /api/v1/findings/metadata/latest": {
      "name": "get_latest_findings_metadata",
      "description": "Fetch unique metadata values from the latest findings across all providers"
    },
    "* /api/v1/scans*": {
      "parameters": {
        "id": {
          "name": "scan_id",
          "description": "The UUID of the scan. The format is UUIDv4: \"4d0e2614-6385-4fa7-bf0b-c2e2f75c6877\""
        }
      }
    },
    "GET /api/v1/scans": {
      "name": "list_scans",
      "description": "List all scans with options for filtering by various criteria.",
      "parameters": {
        "fields[scans]": {
          "name": "fields",
          "description": "The tool will return only the specified fields, if not set all are returned (comma-separated, e.g. \"name,state,progress,duration\")"
        },
        "filter[completed_at]": {
          "name": "filter_completed_at",
          "description": "Filter by exact completion date (format: YYYY-MM-DD)"
        },
        "filter[inserted_at]": {
          "name": "filter_inserted_at",
          "description": "Filter by exact insertion date (format: YYYY-MM-DD)"
        },
        "filter[name]": {
          "name": "filter_name",
          "description": "Filter by exact scan name"
        },
        "filter[name__icontains]": {
          "name": "filter_name_contains",
          "description": "Filter by partial scan name match"
        },
        "filter[next_scan_at]": {
          "name": "filter_next_scan_at",
          "description": "Filter by exact next scan date (format: YYYY-MM-DD)"
        },
        "filter[next_scan_at__gte]": {
          "name": "filter_next_scan_at_gte",
          "description": "Filter scans scheduled on or after this date (format: YYYY-MM-DD)"
        },
        "filter[next_scan_at__lte]": {
          "name": "filter_next_scan_at_lte",
          "description": "Filter scans scheduled on or before this date (format: YYYY-MM-DD)"
        },
        "filter[provider]": {
          "name": "filter_provider",
          "description": "Filter by exact provider UUID (UUIDv4). This UUID is generated by Prowler and it is not related with the UID of the provider (that is the one that is set by the provider). The format is UUIDv4: \"4d0e2614-6385-4fa7-bf0b-c2e2f75c6877\""
        },
        "filter[provider__in]": {
          "name": "filter_provider_in",
          "description": "Filter by multiple provider UUIDs (comma-separated UUIDs, e.g. \"4d0e2614-6385-4fa7-bf0b-c2e2f75c6877,deadbeef-1234-5678-9abc-def012345678,0f1e2d3c-4b5a-6978-8c9d-0e1f2a3b4c5d\"). Useful when searching for multiple providers at once."
        },
        "filter[provider_alias]": {
          "name": "filter_provider_alias",
          "description": "Filter by exact provider alias name"
        },
        "filter[provider_alias__icontains]": {
          "name": "filter_provider_alias_contains",
          "description": "Filter by partial provider alias match"
        },
        "filter[provider_alias__in]": {
          "name": "filter_provider_alias_in",
          "description": "Filter by multiple provider aliases (comma-separated)"
        },
        "filter[provider_type]": {
          "name": "filter_provider_type",
          "description": "Filter by single provider type (aws, azure, gcp, github, kubernetes, m365)"
        },
        "filter[provider_type__in]": {
          "name": "filter_provider_type_in",
          "description": "Filter by multiple provider types (comma-separated, e.g. \"aws,azure,gcp\"). Allowed values are: aws, azure, gcp, kubernetes, m365, github"
        },
        "filter[provider_uid]": {
          "name": "filter_provider_uid",
          "description": "Filter by exact provider UID. This UID is dependent on the provider type: \n\tAWS: AWS account ID\n\tAzure: Azure subscription ID\n\tGCP: GCP project ID\n\tKubernetes: Kubernetes namespace\n\tM365: M365 domain ID\n\tGitHub: GitHub username or organization name"
        },
        "filter[provider_uid__icontains]": {
          "name": "filter_provider_uid_contains",
          "description": "Filter by partial provider UID match"
        },
        "filter[provider_uid__in]": {
          "name": "filter_provider_uid_in",
          "description": "Filter by multiple provider UIDs (comma-separated)"
        },
        "filter[scheduled_at]": {
          "name": "filter_scheduled_at",
          "description": "Filter by exact scheduled date (format: YYYY-MM-DD)"
        },
        "filter[scheduled_at__gte]": {
          "name": "filter_scheduled_at_gte",
          "description": "Filter scans scheduled on or after this date (format: YYYY-MM-DD)"
        },
        "filter[scheduled_at__lte]": {
          "name": "filter_scheduled_at_lte",
          "description": "Filter scans scheduled on or before this date (format: YYYY-MM-DD)"
        },
        "filter[search]": {
          "name": "filter_search",
          "description": "Search term across multiple scan attributes including: name (scan name), trigger (Manual/Scheduled), state (Available, Executing, Completed, Failed, etc.), unique_resource_count (number of resources found), progress (scan progress percentage), duration (scan duration), scheduled_at (when scan is scheduled), started_at (when scan started), completed_at (when scan completed), and next_scan_at (next scheduled scan time)"
        },
        "filter[started_at]": {
          "name": "filter_started_at",
          "description": "Filter by exact start date (format: YYYY-MM-DD)"
        },
        "filter[started_at__gte]": {
          "name": "filter_started_at_gte",
          "description": "Filter scans started on or after this date (format: YYYY-MM-DD)"
        },
        "filter[started_at__lte]": {
          "name": "filter_started_at_lte",
          "description": "Filter scans started on or before this date (format: YYYY-MM-DD)"
        },
        "filter[state]": {
          "name": "filter_state",
          "description": "Filter by exact scan state"
        },
        "filter[state__in]": {
          "name": "filter_state_in",
          "description": "Filter by multiple scan states (comma-separated)"
        },
        "filter[trigger]": {
          "name": "filter_trigger",
          "description": "Filter by scan trigger type"
        },
        "filter[trigger__in]": {
          "name": "filter_trigger_in",
          "description": "Filter by multiple trigger types (comma-separated)"
        },
        "include": {
          "name": "include",
          "description": "Include related resources in the response, supported value is \"provider\""
        },
        "page[number]": {
          "name": "page_number",
          "description": "Page number to retrieve (default: 1)"
        },
        "page[size]": {
          "name": "page_size",
          "description": "Number of results per page (default: 100)"
        },
        "sort": {
          "name": "sort",
          "description": "Sort the results by the specified fields. Use '-' prefix for descending order. (e.g. \"-started_at,name\")"
        }
      }
    },
    "POST /api/v1/scans": {
      "name": "create_scan",
      "description": "Trigger a manual scan for a specific provider",
      "parameters": {
        "provider_id": {
          "name": "provider_id",
          "description": "Prowler generated UUID of the provider to scan. The format is UUIDv4: \"4d0e2614-6385-4fa7-bf0b-c2e2f75c6877\""
        },
        "name": {
          "description": "Optional name for the scan"
        }
      }
    },
    "GET /api/v1/scans/{id}": {
      "name": "get_scan",
      "description": "Get detailed information about a specific scan",
      "parameters": {
        "fields[scans]": {
          "name": "fields",
          "description": "The tool will return only the specified fields, if not set all are returned (comma-separated, e.g. \"name,state,progress,duration\")"
        },
        "include": {
          "description": "Include related resources in the response, supported value is \"provider\""
        }
      }
    },
    "PATCH /api/v1/scans/{id}": {
      "name": "update_scan",
      "description": "Update the details of a specific scan",
      "parameters": {
        "name": {
          "description": "Name for the scan to be updated"
        }
      }
    },
    "GET /api/v1/scans/{id}/compliance/{name}": {
      "name": "get_scan_compliance_report",
      "description": "Download a specific compliance report (e.g., 'cis_1.4_aws') as a CSV file",
      "parameters": {
        "name": {
          "name": "compliance_name"
        },
        "fields[scan-reports]": {
          "name": "fields",
          "description": "The tool will return only the specified fields, if not set all are returned (comma-separated, e.g. \"id,name\")"
        }
      }
    },
    "GET /api/v1/scans/{id}/report": {
      "name": "get_scan_report",
      "description": "Download a ZIP file containing the scan report",
      "parameters": {
        "fields[scan-reports]": {
          "name": "fields",
          "description": "Not use this parameter for now"
        }
      }
    },
    "POST /api/v1/schedules/daily": {
      "name": "schedules_daily_scan",
      "parameters": {
        "provider_id": {
          "name": "provider_id",
          "description": "Prowler generated UUID of the provider to scan. The format is UUIDv4: \"4d0e2614-6385-4fa7-bf0b-c2e2f75c6877\""
        }
      }
    }
  }
}
