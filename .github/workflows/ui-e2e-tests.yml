name: UI - E2E Tests

on:
  push:
  # pull_request:
  #   branches:
  #     - master
  #     - "v5.*"
  #   paths:
  #     - '.github/workflows/ui-e2e-tests.yml'
  #     - 'ui/**'

jobs:
  e2e-tests:
    if: github.repository == 'prowler-cloud/prowler'
    runs-on: ubuntu-latest
    env:
      AUTH_SECRET: 'fallback-ci-secret-for-testing'
      AUTH_TRUST_HOST: true
      NEXTAUTH_URL: 'http://localhost:3000'
      NEXT_PUBLIC_API_BASE_URL: 'http://localhost:8080/api/v1'
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Setup Docker user mapping for CI
        run: |
          # Get current user UID/GID to run containers with same permissions
          export DOCKER_USER=$(id -u)
          export DOCKER_GROUP=$(id -g)
          echo "DOCKER_USER=${DOCKER_USER}" >> $GITHUB_ENV
          echo "DOCKER_GROUP=${DOCKER_GROUP}" >> $GITHUB_ENV
          echo "Will run containers as UID=${DOCKER_USER}, GID=${DOCKER_GROUP}"
          
          # Create API data directory with current user ownership
          mkdir -p ./_data/api
      - name: Start API services
        run: |
          # Override docker-compose image tag to use latest instead of stable
          # This overrides any PROWLER_API_VERSION set in .env file
          export PROWLER_API_VERSION=latest
          echo "Using PROWLER_API_VERSION=${PROWLER_API_VERSION}"
          
          # Use CI-specific docker-compose override to set user mapping
          docker compose -f docker-compose.yml -f docker-compose.ci.yml up -d api worker worker-beat
      - name: Wait for API to be ready
        run: |
          echo "Waiting for prowler-api..."
          echo "Initial container status:"
          docker compose -f docker-compose.yml -f docker-compose.ci.yml ps
          echo "Initial API logs (last 20 lines):"
          docker compose -f docker-compose.yml -f docker-compose.ci.yml logs --tail=20 api || echo "Could not get initial logs"
          echo "---"
          
          timeout=150  # 5 minutes max
          elapsed=0
          while [ $elapsed -lt $timeout ]; do
            # Check if API container is still running
            if ! docker compose -f docker-compose.yml -f docker-compose.ci.yml ps api | grep -q "Up"; then
              echo "❌ ERROR: API container is not running!"
              echo "Container status:"
              docker compose -f docker-compose.yml -f docker-compose.ci.yml ps api
              echo "API container logs:"
              docker compose -f docker-compose.yml -f docker-compose.ci.yml logs api
              exit 1
            fi
            
            # Test API endpoint
            if curl -s ${NEXT_PUBLIC_API_BASE_URL}/docs >/dev/null 2>&1; then
              echo "✅ Prowler API is ready!"
              exit 0
            fi
            
            # Show detailed progress every 30 seconds
            if [ $((elapsed % 30)) -eq 0 ] && [ $elapsed -gt 0 ]; then
              echo "⏳ Still waiting... (${elapsed}s elapsed)"
              echo "Container status:"
              docker compose -f docker-compose.yml -f docker-compose.ci.yml ps api
              echo "Recent API logs (last 10 lines):"
              docker compose -f docker-compose.yml -f docker-compose.ci.yml logs --tail=10 api || echo "Could not get recent logs"
              echo "Testing endpoint connectivity:"
              curl -I -s --connect-timeout 2 ${NEXT_PUBLIC_API_BASE_URL}/docs 2>&1 | head -3 || echo "Connection failed"
              echo "---"
            else
              echo "Waiting for prowler-api... (${elapsed}s elapsed)"
            fi
            
            sleep 5
            elapsed=$((elapsed + 5))
          done
          
          echo "❌ Timeout waiting for prowler-api to start after ${timeout}s"
          echo ""
          echo "=== FINAL DIAGNOSTICS ==="
          echo "Container status:"
          docker compose -f docker-compose.yml -f docker-compose.ci.yml ps
          echo ""
          echo "API container logs (full):"
          docker compose -f docker-compose.yml -f docker-compose.ci.yml logs api
          echo ""
          echo "Worker container logs:"
          docker compose -f docker-compose.yml -f docker-compose.ci.yml logs worker || echo "No worker logs"
          echo ""
          echo "Worker-beat container logs:"
          docker compose -f docker-compose.yml -f docker-compose.ci.yml logs worker-beat || echo "No worker-beat logs"
          echo ""
          echo "System resources:"
          df -h / || echo "Could not check disk space"
          free -h || echo "Could not check memory"
          echo ""
          echo "Network connectivity test:"
          curl -v --connect-timeout 5 ${NEXT_PUBLIC_API_BASE_URL}/docs || echo "Network test failed"
          echo ""
          echo "Docker system info:"
          docker system df || echo "Could not get docker info"
          exit 1
      - name: Load database fixtures for E2E tests
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml exec -T api sh -c '
            echo "Loading all fixtures from api/fixtures/dev/..."
            for fixture in api/fixtures/dev/*.json; do
              if [ -f "$fixture" ]; then
                echo "Loading $fixture"
                poetry run python manage.py loaddata "$fixture" --database admin
              fi
            done
            echo "All database fixtures loaded successfully!"
          '
      - name: Setup Node.js environment
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: './ui/package-lock.json'
      - name: Install UI dependencies
        working-directory: ./ui
        run: npm ci
      - name: Build UI application
        working-directory: ./ui
        run: npm run build
      - name: Cache Playwright browsers
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('ui/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-
      - name: Install Playwright browsers
        working-directory: ./ui
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npm run test:e2e:install
      - name: Run E2E tests
        working-directory: ./ui
        run: npm run test:e2e
      - name: Upload test reports
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: failure()
        with:
          name: playwright-report
          path: ui/playwright-report/
          retention-days: 30
      - name: Cleanup services
        if: always()
        run: |
          echo "Shutting down services..."
          docker compose -f docker-compose.yml -f docker-compose.ci.yml down -v || true
          echo "Cleanup completed"
