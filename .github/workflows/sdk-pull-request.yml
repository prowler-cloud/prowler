name: 'SDK: Pull Request'

on:
  push:
    branches:
      - 'master'
      - 'v5.*'
    paths:
      - 'prowler/**'
      - 'tests/**'
      - 'pyproject.toml'
      - 'poetry.lock'
      - 'Dockerfile'
      - '.github/workflows/sdk-pull-request.yml'
      - '!prowler/CHANGELOG.md'
      - '!.github/**'
      - '!docs/**'
      - '!permissions/**'
      - '!api/**'
      - '!ui/**'
      - '!dashboard/**'
      - '!mcp_server/**'
      - '!README.md'
      - '!mkdocs.yml'
      - '!.backportrc.json'
      - '!.env'
      - '!docker-compose*'
      - '!examples/**'
      - '!.gitignore'
      - '!contrib/**'
  pull_request:
    branches:
      - 'master'
      - 'v5.*'
    paths:
      - 'prowler/**'
      - 'tests/**'
      - 'pyproject.toml'
      - 'poetry.lock'
      - 'Dockerfile'
      - '.github/workflows/sdk-pull-request.yml'
      - '!prowler/CHANGELOG.md'
      - '!.github/**'
      - '!docs/**'
      - '!permissions/**'
      - '!api/**'
      - '!ui/**'
      - '!dashboard/**'
      - '!mcp_server/**'
      - '!README.md'
      - '!mkdocs.yml'
      - '!.backportrc.json'
      - '!.env'
      - '!docker-compose*'
      - '!examples/**'
      - '!.gitignore'
      - '!contrib/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: prowler-sdk

jobs:
  code-quality:
    if: github.repository == 'prowler-cloud/prowler'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
    strategy:
      matrix:
        python-version:
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Install Poetry
        run: pipx install poetry==2.1.1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      - name: Install dependencies
        run: |
          poetry install --no-root
          poetry run pip list

      - name: Check Poetry lock file
        run: poetry check --lock

      - name: Lint with flake8
        run: poetry run flake8 . --ignore=E266,W503,E203,E501,W605,E128 --exclude contrib,ui,api

      - name: Check format with black
        run: poetry run black --exclude api ui --check .

      - name: Lint with pylint
        run: poetry run pylint --disable=W,C,R,E -j 0 -rn -sn prowler/

  security-scans:
    if: github.repository == 'prowler-cloud/prowler'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Install Poetry
        run: pipx install poetry==2.1.1

      - name: Set up Python 3.12
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: '3.12'
          cache: 'poetry'

      - name: Install dependencies
        run: poetry install --no-root

      - name: Security scan with Bandit
        run: poetry run bandit -q -lll -x '*_test.py,./contrib/,./api/,./ui' -r .

      - name: Security scan with Safety
        run: poetry run safety check --ignore 70612 -r pyproject.toml

      - name: Dead code detection with Vulture
        run: poetry run vulture --exclude "contrib,api,ui" --min-confidence 100 .

  tests:
    if: github.repository == 'prowler-cloud/prowler'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
    strategy:
      matrix:
        python-version:
          - '3.12'
        provider:
          - { name: 'AWS', path: 'aws' }
          - { name: 'Azure', path: 'azure' }
          - { name: 'GCP', path: 'gcp' }
          - { name: 'Kubernetes', path: 'kubernetes' }
          - { name: 'GitHub', path: 'github' }
          - { name: 'NHN', path: 'nhn' }
          - { name: 'M365', path: 'm365' }
          - { name: 'IaC', path: 'iac' }
          - { name: 'MongoDB Atlas', path: 'mongodbatlas' }
          - { name: 'OCI', path: 'oraclecloud' }
          - { name: 'Lib', path: 'lib' }
          - { name: 'Config', path: 'config' }

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Check if ${{ matrix.provider.name }} files changed
        id: changed-files
        uses: tj-actions/changed-files@24d32ffd492484c1d75e0c0b894501ddb9d30d62 # v47.0.0
        with:
          files: |
            ./prowler/**/${{ matrix.provider.path }}/**
            ./tests/**/${{ matrix.provider.path }}/**
            ./poetry.lock

      - name: Install Poetry
        if: steps.changed-files.outputs.any_changed == 'true'
        run: pipx install poetry==2.1.1

      - name: Set up Python ${{ matrix.python-version }}
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      - name: Install dependencies
        if: steps.changed-files.outputs.any_changed == 'true'
        run: poetry install --no-root

      - name: Run ${{ matrix.provider.name }} tests
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          if [[ "${{ matrix.provider.path }}" == "lib" || "${{ matrix.provider.path }}" == "config" ]]; then
            poetry run pytest -n auto --cov=./prowler/${{ matrix.provider.path }} --cov-report=xml:${{ matrix.provider.path }}_coverage.xml tests/${{ matrix.provider.path }}
          else
            poetry run pytest -n auto --cov=./prowler/providers/${{ matrix.provider.path }} --cov-report=xml:${{ matrix.provider.path }}_coverage.xml tests/providers/${{ matrix.provider.path }}
          fi

      - name: Upload coverage to Codecov
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          flags: prowler
          files: ./${{ matrix.provider.path }}_coverage.xml

  dockerfile-lint:
    if: github.repository == 'prowler-cloud/prowler'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Check if Dockerfile changed
        id: dockerfile-changed
        uses: tj-actions/changed-files@24d32ffd492484c1d75e0c0b894501ddb9d30d62 # v47.0.0
        with:
          files: Dockerfile

      - name: Lint Dockerfile with Hadolint
        if: steps.dockerfile-changed.outputs.any_changed == 'true'
        uses: hadolint/hadolint-action@2332a7b74a6de0dda2e2221d575162eba76ba5e5 # v3.3.0
        with:
          dockerfile: Dockerfile
          ignore: DL3013

  container-build-and-scan:
    if: github.repository == 'prowler-cloud/prowler'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      security-events: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Build SDK container
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          push: false
          load: true
          tags: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan SDK container with Trivy
        uses: ./.github/actions/trivy-scan
        with:
          image-name: ${{ env.IMAGE_NAME }}
          image-tag: ${{ github.sha }}
          fail-on-critical: 'false'
          severity: 'CRITICAL'
