name: UI - Pull Request

on:
  push:
  #   branches:
  #     - "master"
  #     - "v5.*"
  #   paths:
  #     - ".github/workflows/ui-pull-request.yml"
  #     - "ui/**"
  # pull_request:
  #   branches:
  #     - master
  #     - "v5.*"
  #   paths:
  #     - 'ui/**'
env:
  UI_WORKING_DIR: ./ui
  IMAGE_NAME: prowler-ui
  POSTGRES_DB: mydb
  POSTGRES_USER: myuser
  POSTGRES_PASSWORD: mypassword

jobs:
  test-and-coverage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [20.x]
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: './ui/package-lock.json'
      - name: Install dependencies
        working-directory: ./ui
        run: npm ci
      - name: Run Healthcheck
        working-directory: ./ui
        run: npm run healthcheck
      - name: Build the application
        working-directory: ./ui
        run: npm run build

  e2e-tests:
    runs-on: ubuntu-latest
    env:
      AUTH_SECRET: 'fallback-ci-secret-for-testing'
      AUTH_TRUST_HOST: true
      NEXTAUTH_URL: http://localhost:3000
      # Services
      POSTGRES_ADMIN_USER: postgres
      POSTGRES_ADMIN_PASSWORD: secret
      POSTGRES_DB: mydb
      POSTGRES_PORT: 5432
      VALKEY_PORT: 6379
      DJANGO_PORT: 8080
    services:
      postgres-db:
        image: postgres:16.3-alpine3.20
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ env.POSTGRES_ADMIN_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_ADMIN_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd="pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5
      valkey:
        image: valkey/valkey:7-alpine3.19
        ports:
          - 6379:6379
        env:
          VALKEY_PASSWORD: ${{ env.VALKEY_PASSWORD }}
        options: >-
          --health-cmd="valkey-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - name: Load variables from .env file
        run: |
          set -a
          [ -f .env ] && source .env
          set +a
      - name: Wait for PostgreSQL and Valkey to be ready
        run: |
          for i in {1..10}; do
            healthy_count=$(docker ps --filter health=healthy | grep -E 'postgres-db|valkey' | wc -l)
            if [ "$healthy_count" -eq 2 ]; then
              echo "PostgreSQL and Valkey are ready!"
              break
            fi
            echo "Waiting for services to be healthy..."
            sleep 3
          done
      - name: Start prowler-api manually
        run: |
          docker run -d --rm \
            --name prowler-api \
            --network host \
            -e POSTGRES_ADMIN_USER="${POSTGRES_ADMIN_USER}" \
            -e POSTGRES_ADMIN_PASSWORD="${POSTGRES_ADMIN_PASSWORD}" \
            -e POSTGRES_DB="${POSTGRES_DB}" \
            -e POSTGRES_PORT="${POSTGRES_PORT}" \
            -e VALKEY_PORT="${VALKEY_PORT}" \
            -e DJANGO_PORT="${DJANGO_PORT}" \
            -e AUTH_SECRET="${AUTH_SECRET}" \
            -e AUTH_TRUST_HOST="${AUTH_TRUST_HOST}" \
            prowlercloud/prowler-api:stable \
            ../docker-entrypoint.sh prod
      - name: Test the API responds
        run: |
          sleep 10
          curl -s http://prowler-api:${DJANGO_PORT}/api/v1/docs || echo "The API is not responding"
      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: './ui/package-lock.json'
      - name: Install dependencies
        working-directory: ./ui
        run: npm ci
      - name: Cache Playwright browsers
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('ui/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-
      - name: Install Playwright browsers
        working-directory: ./ui
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npm run test:e2e:install
      - name: Build the application
        working-directory: ./ui
        run: npm run build
      - name: Run Playwright tests
        working-directory: ./ui
        run: npm run test:e2e
      - name: Upload Playwright report
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        if: failure()
        with:
          name: playwright-report
          path: ui/playwright-report/
          retention-days: 30

  test-container-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      - name: Build Container
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: ${{ env.UI_WORKING_DIR }}
          # Always build using `prod` target
          target: prod
          push: false
          tags: ${{ env.IMAGE_NAME }}:latest
          outputs: type=docker
          build-args: |
            NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_51LwpXXXX
