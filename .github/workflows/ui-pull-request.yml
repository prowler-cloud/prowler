name: UI - Pull Request

on:
  push:
    branches:
      - "master"
      - "v5.*"
    paths:
      - ".github/workflows/ui-pull-request.yml"
      - "ui/**"
  pull_request:
    branches:
      - master
      - "v5.*"
    paths:
      - 'ui/**'
env:
  UI_WORKING_DIR: ./ui
  IMAGE_NAME: prowler-ui

jobs:
  test-and-coverage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [20.x]
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: './ui/package-lock.json'
      - name: Install dependencies
        working-directory: ./ui
        run: npm ci
      - name: Run Healthcheck
        working-directory: ./ui
        run: npm run healthcheck
      - name: Build the application
        working-directory: ./ui
        run: npm run build

  e2e-tests:
    runs-on: ubuntu-latest
    env:
      AUTH_SECRET: 'fallback-ci-secret-for-testing'
      AUTH_TRUST_HOST: true
      NEXTAUTH_URL: http://localhost:3000
      PROWLER_API_PORT: 8080
      NEXT_PUBLIC_API_BASE_URL: http://localhost:8080/api/v1
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - name: Start needed services with docker compose
        run: |
          docker compose up -d api worker worker-beat
      - name: Wait for prowler-api to respond
        run: |
          echo "Waiting for prowler-api..."
          for i in {1..30}; do
            if curl -s http://localhost:${PROWLER_API_PORT}/api/v1/docs >/dev/null 2>&1; then
              echo "Prowler API is ready!"
              break
            fi
            echo "Waiting for prowler-api... (attempt $i/30)"
            sleep 3
          done
      - name: Run database migrations
        run: |
          echo "Running Django migrations..."
          docker compose exec -T api sh -c '
            poetry run python manage.py migrate --database admin
          '
          echo "Database migrations completed!"
      - name: Load database fixtures for e2e tests
        run: |
          echo "üîÑ Starting fixture loading process..."
          docker compose exec -T api sh -c '
            set -e  # Exit on any error
            echo "Loading fixtures in correct order..."

            # Load users first
            echo "üìÅ Loading users..."
            poetry run python manage.py loaddata api/fixtures/dev/0_dev_users.json --database admin
            echo "‚úÖ Users loaded successfully"

            # Load tenants and memberships second
            echo "üìÅ Loading tenants and memberships..."
            poetry run python manage.py loaddata api/fixtures/dev/1_dev_tenants.json --database admin
            echo "‚úÖ Tenants and memberships loaded successfully"

            # Load remaining fixtures
            echo "üìÅ Loading remaining fixtures..."
            for fixture in api/fixtures/dev/[2-9]*.json; do
              if [ -f "$fixture" ]; then
                echo "Loading $fixture"
                poetry run python manage.py loaddata "$fixture" --database admin
              fi
            done
            echo "‚úÖ All remaining fixtures loaded successfully"

            echo "üîç Verifying users exist in database..."
            echo "Checking dev user..."
            dev_exists=$(poetry run python manage.py shell -c "from api.models import User; print(User.objects.filter(email='"'"'dev@prowler.com'"'"').exists())")
            echo "Dev user exists: $dev_exists"

            echo "Checking e2e user..."
            e2e_exists=$(poetry run python manage.py shell -c "from api.models import User; print(User.objects.filter(email='"'"'e2e@prowler.com'"'"').exists())")
            echo "E2E user exists: $e2e_exists"

            if [ "$dev_exists" != "True" ]; then
              echo "‚ùå Dev user not found in database!"
              exit 1
            fi

            if [ "$e2e_exists" != "True" ]; then
              echo "‚ùå E2E user not found in database!"
              exit 1
            fi

            echo "‚úÖ All database fixtures loaded and verified successfully!"
          '
          echo "üéâ Fixture loading completed successfully"
      - name: Verify API and test user setup
        run: |
          echo "Verifying API is ready and test user exists..."
          # Wait a bit more for everything to be ready
          sleep 5

          # Test API health endpoint
          echo "Testing API docs endpoint..."
          curl -f http://localhost:${PROWLER_API_PORT}/api/v1/docs >/dev/null || {
            echo "‚ùå API health check failed"
            exit 1
          }
          echo "‚úÖ API docs endpoint is responding"

          # Test schema endpoint for more detailed API verification
          echo "Testing API schema endpoint..."
          schema_response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:${PROWLER_API_PORT}/api/v1/schema)
          if [ "$schema_response" = "200" ]; then
            echo "‚úÖ API schema endpoint is responding"
          else
            echo "‚ö†Ô∏è  API schema endpoint returned HTTP $schema_response"
          fi

          # Test with dev user first (known working user from README)
          echo "Testing authentication with dev user..."
          dev_response=$(curl -s -w "HTTP_CODE:%{http_code}" -X POST \
            -H "Content-Type: application/vnd.api+json" \
            -H "Accept: application/vnd.api+json" \
            -d '{
              "data": {
                "type": "tokens",
                "attributes": {
                  "email": "dev@prowler.com",
                  "password": "Thisisapassword123@"
                }
              }
            }' \
            http://localhost:${PROWLER_API_PORT}/api/v1/tokens)

          dev_http_code=$(echo "$dev_response" | grep -o 'HTTP_CODE:[0-9]*' | cut -d':' -f2)
          dev_body=$(echo "$dev_response" | sed 's/HTTP_CODE:[0-9]*$//')

          echo "Dev user response (HTTP $dev_http_code):"
          echo "$dev_body" | head -c 500
          echo ""

          if [ "$dev_http_code" = "200" ]; then
            echo "‚úÖ Dev user authentication successful"
          else
            echo "‚ùå Dev user authentication failed (HTTP $dev_http_code)"
            echo "This indicates a general API issue"
          fi

          # Test with e2e user
          echo "Testing authentication with e2e user..."
          e2e_response=$(curl -s -w "HTTP_CODE:%{http_code}" -X POST \
            -H "Content-Type: application/vnd.api+json" \
            -H "Accept: application/vnd.api+json" \
            -d '{
              "data": {
                "type": "tokens",
                "attributes": {
                  "email": "e2e@prowler.com",
                  "password": "Thisisapassword123@"
                }
              }
            }' \
            http://localhost:${PROWLER_API_PORT}/api/v1/tokens)

          e2e_http_code=$(echo "$e2e_response" | grep -o 'HTTP_CODE:[0-9]*' | cut -d':' -f2)
          e2e_body=$(echo "$e2e_response" | sed 's/HTTP_CODE:[0-9]*$//')

          echo "E2E user response (HTTP $e2e_http_code):"
          echo "$e2e_body" | head -c 500
          echo ""

          if [ "$e2e_http_code" = "200" ]; then
            echo "‚úÖ E2E user authentication successful"
          else
            echo "‚ùå E2E user authentication failed (HTTP $e2e_http_code)"
            if [ "$dev_http_code" = "200" ]; then
              echo "Dev user works but E2E user doesn't - fixture loading issue with E2E user"
            else
              echo "Both users fail - general API or fixture loading issue"
            fi
            exit 1
          fi
      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: './ui/package-lock.json'
      - name: Install dependencies
        working-directory: ./ui
        run: npm ci
      - name: Cache Playwright browsers
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('ui/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-
      - name: Install Playwright browsers
        working-directory: ./ui
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npm run test:e2e:install
      - name: Build the application
        working-directory: ./ui
        env:
          NEXT_PUBLIC_API_BASE_URL: http://localhost:8080/api/v1
        run: npm run build
      - name: Run Playwright tests
        working-directory: ./ui
        env:
          NEXT_PUBLIC_API_BASE_URL: http://localhost:8080/api/v1
        run: npm run test:e2e
      - name: Upload Playwright report
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        if: failure()
        with:
          name: playwright-report
          path: ui/playwright-report/
          retention-days: 30

      - name: Cleanup services
        if: always()
        run: |
          echo "Shutting down services..."
          docker-compose down -v || true
          echo "Cleanup completed"

  test-container-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      - name: Build Container
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: ${{ env.UI_WORKING_DIR }}
          # Always build using `prod` target
          target: prod
          push: false
          tags: ${{ env.IMAGE_NAME }}:latest
          outputs: type=docker
          build-args: |
            NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_51LwpXXXX
